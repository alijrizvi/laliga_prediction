{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOAiBjBIIghFC1/alw0n8Ux",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/alijrizvi/laliga_prediction/blob/main/project_main_codebook\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Credit for this Guided Project goes to the very talented YouTuber and Data Scientist; **Anas Riad** | https://www.youtube.com/@anas_riad"
      ],
      "metadata": {
        "id": "C2uBjWdCH0xX"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Based on the last 10 Years of data from **La Liga**, the top flight of Spanish Football (Soccer), as well as the results so far for this ongoing season, who will win La Liga this year?"
      ],
      "metadata": {
        "id": "GVAKQx-1IuCF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np"
      ],
      "metadata": {
        "id": "Zl_EmHUpH_aj"
      },
      "execution_count": 43,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Data Scraping"
      ],
      "metadata": {
        "id": "ML7mJlKJNOJv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_1415 = pd.read_html('https://fbref.com/en/comps/12/2014-2015/2014-2015-La-Liga-Stats',\n",
        "                       attrs = {'id': 'results2014-2015121_overall'})[0]\n",
        "\n",
        "# On the Table's page, right-click -> \"Inspect\"/\"Inspect Element\" -> \"<table class>\" area to get \"id\"^\n",
        "\n",
        "df_1415.head(5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "5Qx_n4eWJERu",
        "outputId": "ec090eec-9631-4bba-e52a-3724af9e91d9"
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Rk            Squad  MP   W   D  L   GF  GA  GD  Pts  Pts/MP  Attendance  \\\n",
              "0   1        Barcelona  38  30   4  4  110  21  89   94    2.47       77632   \n",
              "1   2      Real Madrid  38  30   2  6  118  38  80   92    2.42       73545   \n",
              "2   3  Atlético Madrid  38  23   9  6   67  29  38   78    2.05       46454   \n",
              "3   4         Valencia  38  22  11  5   70  32  38   77    2.03       43125   \n",
              "4   5          Sevilla  38  23   7  8   71  45  26   76    2.00       30878   \n",
              "\n",
              "          Top Team Scorer         Goalkeeper  \\\n",
              "0       Lionel Messi - 43      Claudio Bravo   \n",
              "1  Cristiano Ronaldo - 48      Iker Casillas   \n",
              "2  Antoine Griezmann - 22  Miguel Ángel Moyá   \n",
              "3      Daniel Parejo - 12        Diego Alves   \n",
              "4       Carlos Bacca - 20        Sergio Rico   \n",
              "\n",
              "                                         Notes  \n",
              "0  → Champions League via Champions League win  \n",
              "1         → Champions League via league finish  \n",
              "2         → Champions League via league finish  \n",
              "3         → Champions League via league finish  \n",
              "4     → Champions League via Europa League win  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1e3c34a6-d999-4caf-9a3b-379f3a101caf\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Rk</th>\n",
              "      <th>Squad</th>\n",
              "      <th>MP</th>\n",
              "      <th>W</th>\n",
              "      <th>D</th>\n",
              "      <th>L</th>\n",
              "      <th>GF</th>\n",
              "      <th>GA</th>\n",
              "      <th>GD</th>\n",
              "      <th>Pts</th>\n",
              "      <th>Pts/MP</th>\n",
              "      <th>Attendance</th>\n",
              "      <th>Top Team Scorer</th>\n",
              "      <th>Goalkeeper</th>\n",
              "      <th>Notes</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>Barcelona</td>\n",
              "      <td>38</td>\n",
              "      <td>30</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>110</td>\n",
              "      <td>21</td>\n",
              "      <td>89</td>\n",
              "      <td>94</td>\n",
              "      <td>2.47</td>\n",
              "      <td>77632</td>\n",
              "      <td>Lionel Messi - 43</td>\n",
              "      <td>Claudio Bravo</td>\n",
              "      <td>→ Champions League via Champions League win</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>Real Madrid</td>\n",
              "      <td>38</td>\n",
              "      <td>30</td>\n",
              "      <td>2</td>\n",
              "      <td>6</td>\n",
              "      <td>118</td>\n",
              "      <td>38</td>\n",
              "      <td>80</td>\n",
              "      <td>92</td>\n",
              "      <td>2.42</td>\n",
              "      <td>73545</td>\n",
              "      <td>Cristiano Ronaldo - 48</td>\n",
              "      <td>Iker Casillas</td>\n",
              "      <td>→ Champions League via league finish</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>Atlético Madrid</td>\n",
              "      <td>38</td>\n",
              "      <td>23</td>\n",
              "      <td>9</td>\n",
              "      <td>6</td>\n",
              "      <td>67</td>\n",
              "      <td>29</td>\n",
              "      <td>38</td>\n",
              "      <td>78</td>\n",
              "      <td>2.05</td>\n",
              "      <td>46454</td>\n",
              "      <td>Antoine Griezmann - 22</td>\n",
              "      <td>Miguel Ángel Moyá</td>\n",
              "      <td>→ Champions League via league finish</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>Valencia</td>\n",
              "      <td>38</td>\n",
              "      <td>22</td>\n",
              "      <td>11</td>\n",
              "      <td>5</td>\n",
              "      <td>70</td>\n",
              "      <td>32</td>\n",
              "      <td>38</td>\n",
              "      <td>77</td>\n",
              "      <td>2.03</td>\n",
              "      <td>43125</td>\n",
              "      <td>Daniel Parejo - 12</td>\n",
              "      <td>Diego Alves</td>\n",
              "      <td>→ Champions League via league finish</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>Sevilla</td>\n",
              "      <td>38</td>\n",
              "      <td>23</td>\n",
              "      <td>7</td>\n",
              "      <td>8</td>\n",
              "      <td>71</td>\n",
              "      <td>45</td>\n",
              "      <td>26</td>\n",
              "      <td>76</td>\n",
              "      <td>2.00</td>\n",
              "      <td>30878</td>\n",
              "      <td>Carlos Bacca - 20</td>\n",
              "      <td>Sergio Rico</td>\n",
              "      <td>→ Champions League via Europa League win</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1e3c34a6-d999-4caf-9a3b-379f3a101caf')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-1e3c34a6-d999-4caf-9a3b-379f3a101caf button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-1e3c34a6-d999-4caf-9a3b-379f3a101caf');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-1d6dfbc5-c8cc-4fd7-ae3e-fd12c025916a\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1d6dfbc5-c8cc-4fd7-ae3e-fd12c025916a')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-1d6dfbc5-c8cc-4fd7-ae3e-fd12c025916a button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_1415",
              "summary": "{\n  \"name\": \"df_1415\",\n  \"rows\": 20,\n  \"fields\": [\n    {\n      \"column\": \"Rk\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 1,\n        \"max\": 20,\n        \"num_unique_values\": 20,\n        \"samples\": [\n          1,\n          18,\n          16\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Squad\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 20,\n        \"samples\": [\n          \"Barcelona\",\n          \"Eibar\",\n          \"La Coru\\u00f1a\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MP\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 38,\n        \"max\": 38,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          38\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"W\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7,\n        \"min\": 3,\n        \"max\": 30,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"D\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 2,\n        \"max\": 14,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          13\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"L\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6,\n        \"min\": 4,\n        \"max\": 24,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          14\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GF\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 25,\n        \"min\": 22,\n        \"max\": 118,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          44\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GA\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14,\n        \"min\": 21,\n        \"max\": 68,\n        \"num_unique_values\": 16,\n        \"samples\": [\n          21\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GD\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 37,\n        \"min\": -46,\n        \"max\": 89,\n        \"num_unique_values\": 19,\n        \"samples\": [\n          89\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pts\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 20,\n        \"min\": 20,\n        \"max\": 94,\n        \"num_unique_values\": 16,\n        \"samples\": [\n          94\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pts/MP\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5519477473361709,\n        \"min\": 0.53,\n        \"max\": 2.47,\n        \"num_unique_values\": 16,\n        \"samples\": [\n          2.47\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Attendance\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 20113,\n        \"min\": 4773,\n        \"max\": 77632,\n        \"num_unique_values\": 20,\n        \"samples\": [\n          77632\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Top Team Scorer\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 20,\n        \"samples\": [\n          \"Lionel Messi - 43\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Goalkeeper\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 20,\n        \"samples\": [\n          \"Claudio Bravo\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Notes\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 9,\n        \"samples\": [\n          \"3-point deduction 4, Relegated\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Doing the Same for the Rest of the Seasons until Now (the 2024-2025 Season, Inclusive)\n",
        "\n",
        "df_1516 = pd.read_html('https://fbref.com/en/comps/12/2015-2016/2016-2017-La-Liga-Stats',\n",
        "                       attrs = {'id': 'results2015-2016121_overall'})[0]\n",
        "\n",
        "df_1617 = pd.read_html('https://fbref.com/en/comps/12/2016-2017/2016-2017-La-Liga-Stats',\n",
        "                       attrs = {'id': 'results2016-2017121_overall'})[0]\n",
        "\n",
        "df_1718 = pd.read_html('https://fbref.com/en/comps/12/2017-2018/2017-2018-La-Liga-Stats',\n",
        "                       attrs = {'id': 'results2017-2018121_overall'})[0]\n",
        "\n",
        "df_1819 = pd.read_html('https://fbref.com/en/comps/12/2018-2019/2018-2019-La-Liga-Stats',\n",
        "                       attrs = {'id': 'results2018-2019121_overall'})[0]\n",
        "\n",
        "df_1920 = pd.read_html('https://fbref.com/en/comps/12/2019-2020/2019-2020-La-Liga-Stats',\n",
        "                       attrs = {'id': 'results2019-2020121_overall'})[0]\n",
        "\n",
        "df_2021 = pd.read_html('https://fbref.com/en/comps/12/2020-2021/2020-2021-La-Liga-Stats',\n",
        "                       attrs = {'id': 'results2020-2021121_overall'})[0]\n",
        "\n",
        "df_2122 = pd.read_html('https://fbref.com/en/comps/12/2021-2022/2021-2022-La-Liga-Stats',\n",
        "                       attrs = {'id': 'results2021-2022121_overall'})[0]\n",
        "\n",
        "df_2223 = pd.read_html('https://fbref.com/en/comps/12/2022-2023/2022-2023-La-Liga-Stats',\n",
        "                       attrs = {'id': 'results2022-2023121_overall'})[0]\n",
        "\n",
        "df_2324 = pd.read_html('https://fbref.com/en/comps/12/2023-2024/2023-2024-La-Liga-Stats',\n",
        "                       attrs = {'id': 'results2023-2024121_overall'})[0]\n",
        "\n",
        "df_2425 = pd.read_html('https://fbref.com/en/comps/12/2024-2025/2024-2025-La-Liga-Stats',\n",
        "                       attrs = {'id': 'results2024-2025121_overall'})[0]"
      ],
      "metadata": {
        "id": "Qzv57K4ZKvWP"
      },
      "execution_count": 45,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_2425.head(4)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 174
        },
        "id": "q2J4ON5WMd_w",
        "outputId": "ac59d07f-c10b-487b-9ea5-5c5bd7f59eca"
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Rk            Squad  MP   W   D  L   GF  GA  GD  Pts  Pts/MP    xG   xGA  \\\n",
              "0   1        Barcelona  38  28   4  6  102  39  63   88    2.32  91.5  41.9   \n",
              "1   2      Real Madrid  38  26   6  6   78  38  40   84    2.21  75.3  42.8   \n",
              "2   3  Atlético Madrid  38  22  10  6   68  30  38   76    2.00  64.6  33.4   \n",
              "3   4    Athletic Club  38  19  13  6   54  29  25   70    1.84  53.0  37.8   \n",
              "\n",
              "    xGD  xGD/90  Attendance          Top Team Scorer        Goalkeeper  \\\n",
              "0  49.5    1.30       45953  Robert Lewandowski - 27        Iñaki Peña   \n",
              "1  32.5    0.86       69807       Kylian Mbappé - 31  Thibaut Courtois   \n",
              "2  31.2    0.82       60883   Alexander Sørloth - 20         Jan Oblak   \n",
              "3  15.2    0.40       48420        Oihan Sancet - 15        Unai Simón   \n",
              "\n",
              "                                  Notes  \n",
              "0  → Champions League via league finish  \n",
              "1  → Champions League via league finish  \n",
              "2  → Champions League via league finish  \n",
              "3  → Champions League via league finish  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-050e5f9f-8ac0-4eef-9f1f-59b7ed1a0a86\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Rk</th>\n",
              "      <th>Squad</th>\n",
              "      <th>MP</th>\n",
              "      <th>W</th>\n",
              "      <th>D</th>\n",
              "      <th>L</th>\n",
              "      <th>GF</th>\n",
              "      <th>GA</th>\n",
              "      <th>GD</th>\n",
              "      <th>Pts</th>\n",
              "      <th>Pts/MP</th>\n",
              "      <th>xG</th>\n",
              "      <th>xGA</th>\n",
              "      <th>xGD</th>\n",
              "      <th>xGD/90</th>\n",
              "      <th>Attendance</th>\n",
              "      <th>Top Team Scorer</th>\n",
              "      <th>Goalkeeper</th>\n",
              "      <th>Notes</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>Barcelona</td>\n",
              "      <td>38</td>\n",
              "      <td>28</td>\n",
              "      <td>4</td>\n",
              "      <td>6</td>\n",
              "      <td>102</td>\n",
              "      <td>39</td>\n",
              "      <td>63</td>\n",
              "      <td>88</td>\n",
              "      <td>2.32</td>\n",
              "      <td>91.5</td>\n",
              "      <td>41.9</td>\n",
              "      <td>49.5</td>\n",
              "      <td>1.30</td>\n",
              "      <td>45953</td>\n",
              "      <td>Robert Lewandowski - 27</td>\n",
              "      <td>Iñaki Peña</td>\n",
              "      <td>→ Champions League via league finish</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>Real Madrid</td>\n",
              "      <td>38</td>\n",
              "      <td>26</td>\n",
              "      <td>6</td>\n",
              "      <td>6</td>\n",
              "      <td>78</td>\n",
              "      <td>38</td>\n",
              "      <td>40</td>\n",
              "      <td>84</td>\n",
              "      <td>2.21</td>\n",
              "      <td>75.3</td>\n",
              "      <td>42.8</td>\n",
              "      <td>32.5</td>\n",
              "      <td>0.86</td>\n",
              "      <td>69807</td>\n",
              "      <td>Kylian Mbappé - 31</td>\n",
              "      <td>Thibaut Courtois</td>\n",
              "      <td>→ Champions League via league finish</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>Atlético Madrid</td>\n",
              "      <td>38</td>\n",
              "      <td>22</td>\n",
              "      <td>10</td>\n",
              "      <td>6</td>\n",
              "      <td>68</td>\n",
              "      <td>30</td>\n",
              "      <td>38</td>\n",
              "      <td>76</td>\n",
              "      <td>2.00</td>\n",
              "      <td>64.6</td>\n",
              "      <td>33.4</td>\n",
              "      <td>31.2</td>\n",
              "      <td>0.82</td>\n",
              "      <td>60883</td>\n",
              "      <td>Alexander Sørloth - 20</td>\n",
              "      <td>Jan Oblak</td>\n",
              "      <td>→ Champions League via league finish</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>Athletic Club</td>\n",
              "      <td>38</td>\n",
              "      <td>19</td>\n",
              "      <td>13</td>\n",
              "      <td>6</td>\n",
              "      <td>54</td>\n",
              "      <td>29</td>\n",
              "      <td>25</td>\n",
              "      <td>70</td>\n",
              "      <td>1.84</td>\n",
              "      <td>53.0</td>\n",
              "      <td>37.8</td>\n",
              "      <td>15.2</td>\n",
              "      <td>0.40</td>\n",
              "      <td>48420</td>\n",
              "      <td>Oihan Sancet - 15</td>\n",
              "      <td>Unai Simón</td>\n",
              "      <td>→ Champions League via league finish</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-050e5f9f-8ac0-4eef-9f1f-59b7ed1a0a86')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-050e5f9f-8ac0-4eef-9f1f-59b7ed1a0a86 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-050e5f9f-8ac0-4eef-9f1f-59b7ed1a0a86');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-b092f76f-5c0a-49ef-bd9d-2ae0c5a8ef3e\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b092f76f-5c0a-49ef-bd9d-2ae0c5a8ef3e')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-b092f76f-5c0a-49ef-bd9d-2ae0c5a8ef3e button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_2425",
              "summary": "{\n  \"name\": \"df_2425\",\n  \"rows\": 20,\n  \"fields\": [\n    {\n      \"column\": \"Rk\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 1,\n        \"max\": 20,\n        \"num_unique_values\": 20,\n        \"samples\": [\n          1,\n          18,\n          16\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Squad\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 20,\n        \"samples\": [\n          \"Barcelona\",\n          \"Legan\\u00e9s\",\n          \"Girona\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MP\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 38,\n        \"max\": 38,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          38\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"W\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6,\n        \"min\": 4,\n        \"max\": 28,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"D\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 4,\n        \"max\": 16,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"L\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6,\n        \"min\": 6,\n        \"max\": 30,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          22\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GF\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 18,\n        \"min\": 26,\n        \"max\": 102,\n        \"num_unique_values\": 17,\n        \"samples\": [\n          102\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GA\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13,\n        \"min\": 29,\n        \"max\": 90,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          39\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GD\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 27,\n        \"min\": -64,\n        \"max\": 63,\n        \"num_unique_values\": 17,\n        \"samples\": [\n          63\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pts\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17,\n        \"min\": 16,\n        \"max\": 88,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          42\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pts/MP\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.47112519288233895,\n        \"min\": 0.42,\n        \"max\": 2.32,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          1.11\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"xG\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15.05115750051348,\n        \"min\": 34.4,\n        \"max\": 91.5,\n        \"num_unique_values\": 19,\n        \"samples\": [\n          91.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"xGA\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.535615785759411,\n        \"min\": 33.4,\n        \"max\": 67.6,\n        \"num_unique_values\": 20,\n        \"samples\": [\n          41.9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"xGD\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 21.329803093324607,\n        \"min\": -33.0,\n        \"max\": 49.5,\n        \"num_unique_values\": 20,\n        \"samples\": [\n          49.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"xGD/90\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5616467798030698,\n        \"min\": -0.87,\n        \"max\": 1.3,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          1.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Attendance\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17607,\n        \"min\": 11135,\n        \"max\": 69807,\n        \"num_unique_values\": 20,\n        \"samples\": [\n          45953\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Top Team Scorer\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 20,\n        \"samples\": [\n          \"Robert Lewandowski - 27\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Goalkeeper\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 20,\n        \"samples\": [\n          \"I\\u00f1aki Pe\\u00f1a\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Notes\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"\\u2192 Europa League via league finish\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 46
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# List of DataFrames\n",
        "dfs = [df_1415, df_1516, df_1617, df_1718, df_1819, df_1920, df_2021, df_2122, df_2223, df_2324, df_2425]\n",
        "\n",
        "# Standardizing all Column Names\n",
        "for df in dfs:\n",
        "    df.columns = df.columns.str.strip().str.lower().str.replace(' ', '_')\n",
        "\n",
        "# Adding a Season column, in each DataFrame\n",
        "yrs = list(range(2014, 2025))\n",
        "for df, yr in zip(dfs, yrs):\n",
        "  df['season'] = yr\n",
        "\n",
        "# Concatenating all Seasons into one, Aggregated Pandas DataFrame\n",
        "df = pd.concat(dfs, ignore_index = True)"
      ],
      "metadata": {
        "id": "errZLI8gL3Fw"
      },
      "execution_count": 47,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "pd.set_option('display.max_columns', None)\n",
        "\n",
        "print(df.shape)\n",
        "# df.head(7)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FpFUp0NYM2iu",
        "outputId": "ce226b09-3a98-4d69-da41-56c2c7a65540"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(220, 20)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.rename(columns = {'season': 'season_start_yr'}, inplace = True)"
      ],
      "metadata": {
        "id": "jLHzPdqoM6JT"
      },
      "execution_count": 49,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.head(5)\n",
        "# df.to_csv('laliga_2014_2025.csv', index = False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 258
        },
        "id": "2RmoLXQFNWf0",
        "outputId": "69ac5905-8eb9-4216-93b8-7edbc1bb901c"
      },
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   rk            squad  mp   w   d  l   gf  ga  gd  pts  pts/mp  attendance  \\\n",
              "0   1        Barcelona  38  30   4  4  110  21  89   94    2.47     77632.0   \n",
              "1   2      Real Madrid  38  30   2  6  118  38  80   92    2.42     73545.0   \n",
              "2   3  Atlético Madrid  38  23   9  6   67  29  38   78    2.05     46454.0   \n",
              "3   4         Valencia  38  22  11  5   70  32  38   77    2.03     43125.0   \n",
              "4   5          Sevilla  38  23   7  8   71  45  26   76    2.00     30878.0   \n",
              "\n",
              "          top_team_scorer         goalkeeper  \\\n",
              "0       Lionel Messi - 43      Claudio Bravo   \n",
              "1  Cristiano Ronaldo - 48      Iker Casillas   \n",
              "2  Antoine Griezmann - 22  Miguel Ángel Moyá   \n",
              "3      Daniel Parejo - 12        Diego Alves   \n",
              "4       Carlos Bacca - 20        Sergio Rico   \n",
              "\n",
              "                                         notes  season_start_yr  xg  xga  xgd  \\\n",
              "0  → Champions League via Champions League win             2014 NaN  NaN  NaN   \n",
              "1         → Champions League via league finish             2014 NaN  NaN  NaN   \n",
              "2         → Champions League via league finish             2014 NaN  NaN  NaN   \n",
              "3         → Champions League via league finish             2014 NaN  NaN  NaN   \n",
              "4     → Champions League via Europa League win             2014 NaN  NaN  NaN   \n",
              "\n",
              "   xgd/90  \n",
              "0     NaN  \n",
              "1     NaN  \n",
              "2     NaN  \n",
              "3     NaN  \n",
              "4     NaN  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3690075d-0d38-4db4-90ef-ee2e40761f53\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>rk</th>\n",
              "      <th>squad</th>\n",
              "      <th>mp</th>\n",
              "      <th>w</th>\n",
              "      <th>d</th>\n",
              "      <th>l</th>\n",
              "      <th>gf</th>\n",
              "      <th>ga</th>\n",
              "      <th>gd</th>\n",
              "      <th>pts</th>\n",
              "      <th>pts/mp</th>\n",
              "      <th>attendance</th>\n",
              "      <th>top_team_scorer</th>\n",
              "      <th>goalkeeper</th>\n",
              "      <th>notes</th>\n",
              "      <th>season_start_yr</th>\n",
              "      <th>xg</th>\n",
              "      <th>xga</th>\n",
              "      <th>xgd</th>\n",
              "      <th>xgd/90</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>Barcelona</td>\n",
              "      <td>38</td>\n",
              "      <td>30</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>110</td>\n",
              "      <td>21</td>\n",
              "      <td>89</td>\n",
              "      <td>94</td>\n",
              "      <td>2.47</td>\n",
              "      <td>77632.0</td>\n",
              "      <td>Lionel Messi - 43</td>\n",
              "      <td>Claudio Bravo</td>\n",
              "      <td>→ Champions League via Champions League win</td>\n",
              "      <td>2014</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>Real Madrid</td>\n",
              "      <td>38</td>\n",
              "      <td>30</td>\n",
              "      <td>2</td>\n",
              "      <td>6</td>\n",
              "      <td>118</td>\n",
              "      <td>38</td>\n",
              "      <td>80</td>\n",
              "      <td>92</td>\n",
              "      <td>2.42</td>\n",
              "      <td>73545.0</td>\n",
              "      <td>Cristiano Ronaldo - 48</td>\n",
              "      <td>Iker Casillas</td>\n",
              "      <td>→ Champions League via league finish</td>\n",
              "      <td>2014</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>Atlético Madrid</td>\n",
              "      <td>38</td>\n",
              "      <td>23</td>\n",
              "      <td>9</td>\n",
              "      <td>6</td>\n",
              "      <td>67</td>\n",
              "      <td>29</td>\n",
              "      <td>38</td>\n",
              "      <td>78</td>\n",
              "      <td>2.05</td>\n",
              "      <td>46454.0</td>\n",
              "      <td>Antoine Griezmann - 22</td>\n",
              "      <td>Miguel Ángel Moyá</td>\n",
              "      <td>→ Champions League via league finish</td>\n",
              "      <td>2014</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>Valencia</td>\n",
              "      <td>38</td>\n",
              "      <td>22</td>\n",
              "      <td>11</td>\n",
              "      <td>5</td>\n",
              "      <td>70</td>\n",
              "      <td>32</td>\n",
              "      <td>38</td>\n",
              "      <td>77</td>\n",
              "      <td>2.03</td>\n",
              "      <td>43125.0</td>\n",
              "      <td>Daniel Parejo - 12</td>\n",
              "      <td>Diego Alves</td>\n",
              "      <td>→ Champions League via league finish</td>\n",
              "      <td>2014</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>Sevilla</td>\n",
              "      <td>38</td>\n",
              "      <td>23</td>\n",
              "      <td>7</td>\n",
              "      <td>8</td>\n",
              "      <td>71</td>\n",
              "      <td>45</td>\n",
              "      <td>26</td>\n",
              "      <td>76</td>\n",
              "      <td>2.00</td>\n",
              "      <td>30878.0</td>\n",
              "      <td>Carlos Bacca - 20</td>\n",
              "      <td>Sergio Rico</td>\n",
              "      <td>→ Champions League via Europa League win</td>\n",
              "      <td>2014</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3690075d-0d38-4db4-90ef-ee2e40761f53')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3690075d-0d38-4db4-90ef-ee2e40761f53 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3690075d-0d38-4db4-90ef-ee2e40761f53');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-9d2672b7-d7fa-40a0-b8f4-35ba752cc02a\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9d2672b7-d7fa-40a0-b8f4-35ba752cc02a')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-9d2672b7-d7fa-40a0-b8f4-35ba752cc02a button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"# df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"rk\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 5,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          2,\n          5,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"squad\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Real Madrid\",\n          \"Sevilla\",\n          \"Atl\\u00e9tico Madrid\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 38,\n        \"max\": 38,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          38\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"w\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4,\n        \"min\": 22,\n        \"max\": 30,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          30\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"d\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 2,\n        \"max\": 11,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"l\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 4,\n        \"max\": 8,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gf\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24,\n        \"min\": 67,\n        \"max\": 118,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          118\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ga\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9,\n        \"min\": 21,\n        \"max\": 45,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          38\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gd\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 28,\n        \"min\": 26,\n        \"max\": 89,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          80\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pts\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8,\n        \"min\": 76,\n        \"max\": 94,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          92\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pts/mp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.23049945770001293,\n        \"min\": 2.0,\n        \"max\": 2.47,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          2.42\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"attendance\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 20308.736314699643,\n        \"min\": 30878.0,\n        \"max\": 77632.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          73545.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"top_team_scorer\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Cristiano Ronaldo - 48\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"goalkeeper\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Iker Casillas\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"notes\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"\\u2192 Champions League via Champions League win\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"season_start_yr\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 2014,\n        \"max\": 2014,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          2014\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"xg\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": null,\n        \"max\": null,\n        \"num_unique_values\": 0,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"xga\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": null,\n        \"max\": null,\n        \"num_unique_values\": 0,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"xgd\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": null,\n        \"max\": null,\n        \"num_unique_values\": 0,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"xgd/90\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": null,\n        \"max\": null,\n        \"num_unique_values\": 0,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Data Analysis & Visualization"
      ],
      "metadata": {
        "id": "D6Q6dVY6Nc8m"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Hypothesis:\n",
        "\n",
        "\n",
        "\n",
        "*   Given the current state of the table and records/data from past seasons, what is the realistic probability for each team to win the league this season (2024-2025)?\n",
        "*   What are the 2 teams that will most likely get relegated?\n",
        "*   Which team will most likely go to the UEFA Conference League (7th place)?\n",
        "*   What will the Final 2024-2025 table most likely look like?"
      ],
      "metadata": {
        "id": "1PCXjsJMjUpN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df['squad'].value_counts() # Count of '11': Team was not Relegated in the past 11 years"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "TZlHhpC1NZGS",
        "outputId": "108a8c84-a182-44a9-c6fa-faadeb4cff2c"
      },
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "squad\n",
              "Barcelona          11\n",
              "Real Madrid        11\n",
              "Atlético Madrid    11\n",
              "Valencia           11\n",
              "Sevilla            11\n",
              "Villarreal         11\n",
              "Athletic Club      11\n",
              "Celta Vigo         11\n",
              "Real Sociedad      11\n",
              "Getafe             10\n",
              "Betis              10\n",
              "Espanyol            9\n",
              "Alavés              8\n",
              "Levante             7\n",
              "Rayo Vallecano      7\n",
              "Osasuna             7\n",
              "Granada             7\n",
              "Eibar               7\n",
              "Mallorca            5\n",
              "Valladolid          5\n",
              "Leganés             5\n",
              "Girona              5\n",
              "Las Palmas          5\n",
              "Elche               4\n",
              "Málaga              4\n",
              "Cádiz               4\n",
              "La Coruña           4\n",
              "Almería             3\n",
              "Sporting Gijón      2\n",
              "Huesca              2\n",
              "Córdoba             1\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>squad</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Barcelona</th>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Real Madrid</th>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Atlético Madrid</th>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Valencia</th>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Sevilla</th>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Villarreal</th>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Athletic Club</th>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Celta Vigo</th>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Real Sociedad</th>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Getafe</th>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Betis</th>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Espanyol</th>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Alavés</th>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Levante</th>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Rayo Vallecano</th>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Osasuna</th>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Granada</th>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Eibar</th>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Mallorca</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Valladolid</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Leganés</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Girona</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Las Palmas</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Elche</th>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Málaga</th>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Cádiz</th>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>La Coruña</th>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Almería</th>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Sporting Gijón</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Huesca</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Córdoba</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 51
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# For each Rank, which Team Attained it most?\n",
        "df['squad'].groupby(df['rk']).value_counts().head(12)\n",
        "\n",
        "# Barca won the League 6 times, RMA 4 times, and Atleti once, in the past 11 years!"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 491
        },
        "id": "Mrrt3-J6kMr8",
        "outputId": "d6209900-869a-49c1-bbff-ae5f5bed7101"
      },
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "rk  squad          \n",
              "1   Barcelona          6\n",
              "    Real Madrid        4\n",
              "    Atlético Madrid    1\n",
              "2   Real Madrid        5\n",
              "    Barcelona          4\n",
              "    Atlético Madrid    2\n",
              "3   Atlético Madrid    7\n",
              "    Real Madrid        2\n",
              "    Barcelona          1\n",
              "    Girona             1\n",
              "4   Sevilla            4\n",
              "    Valencia           3\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>rk</th>\n",
              "      <th>squad</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th rowspan=\"3\" valign=\"top\">1</th>\n",
              "      <th>Barcelona</th>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Real Madrid</th>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Atlético Madrid</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"3\" valign=\"top\">2</th>\n",
              "      <th>Real Madrid</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Barcelona</th>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Atlético Madrid</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"4\" valign=\"top\">3</th>\n",
              "      <th>Atlético Madrid</th>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Real Madrid</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Barcelona</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Girona</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"2\" valign=\"top\">4</th>\n",
              "      <th>Sevilla</th>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Valencia</th>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 52
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "import plotly.express as px\n",
        "\n",
        "# Creating a Pivot Table to count occurrences of each rank for each Team\n",
        "rank_counts = df['squad'].groupby(df['rk']).value_counts().reset_index(name = 'count') # \"reset_index(name = 'count' Converts it into a DataFrame with a new 'count' column to store the Frequency of each Team-Rank combo\n",
        "\n",
        "# Keeping only the Top 3 Positions (ranks)\n",
        "rank_counts = rank_counts[rank_counts['rk'].isin([1, 2, 3])]\n",
        "\n",
        "# Plotting the Stacked Bar Graph\n",
        "fig = px.bar(rank_counts, x = 'squad', y = 'count', color = 'rk',\n",
        "             barmode = 'group', # this places bars for each Rank side-by-side for each Team\n",
        "             title = 'Top 3 Finishes by Team and Rank - Last 10 Years',\n",
        "             labels = {'squad': 'Team', 'count': 'Finish Count', 'rk': 'Rank'})\n",
        "\n",
        "fig.update_layout(xaxis = {'categoryorder': 'total descending'}) # Sorts Team names in Descending Order based on Total Count of top 3 Finishes\n",
        "fig.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 542
        },
        "id": "pC2GtvyqklXH",
        "outputId": "58770ff1-0aee-4b97-9824-b5e10e66f27e"
      },
      "execution_count": 53,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.35.2.min.js\"></script>                <div id=\"8c0162bb-2a58-400d-94de-33af3c8eea36\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"8c0162bb-2a58-400d-94de-33af3c8eea36\")) {                    Plotly.newPlot(                        \"8c0162bb-2a58-400d-94de-33af3c8eea36\",                        [{\"alignmentgroup\":\"True\",\"hovertemplate\":\"Team=%{x}\\u003cbr\\u003eFinish Count=%{y}\\u003cbr\\u003eRank=%{marker.color}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":[1,1,1,2,2,2,3,3,3,3],\"coloraxis\":\"coloraxis\",\"pattern\":{\"shape\":\"\"}},\"name\":\"\",\"offsetgroup\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"textposition\":\"auto\",\"x\":[\"Barcelona\",\"Real Madrid\",\"Atlético Madrid\",\"Real Madrid\",\"Barcelona\",\"Atlético Madrid\",\"Atlético Madrid\",\"Real Madrid\",\"Barcelona\",\"Girona\"],\"xaxis\":\"x\",\"y\":[6,4,1,5,4,2,7,2,1,1],\"yaxis\":\"y\",\"type\":\"bar\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Team\"},\"categoryorder\":\"total descending\"},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Finish Count\"}},\"coloraxis\":{\"colorbar\":{\"title\":{\"text\":\"Rank\"}},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Top 3 Finishes by Team and Rank - Last 10 Years\"},\"barmode\":\"group\"},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('8c0162bb-2a58-400d-94de-33af3c8eea36');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.describe().round(2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "H5Ly2bpqlD0z",
        "outputId": "52833929-b8aa-4509-81b7-a34b97e5a433"
      },
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           rk     mp       w       d       l      gf      ga      gd     pts  \\\n",
              "count  220.00  220.0  220.00  220.00  220.00  220.00  220.00  220.00  220.00   \n",
              "mean    10.50   38.0   14.06    9.87   14.06   49.90   49.90    0.00   52.05   \n",
              "std      5.78    0.0    6.21    2.91    5.48   17.75   13.14   26.75   17.47   \n",
              "min      1.00   38.0    3.00    2.00    1.00   22.00   18.00  -64.00   16.00   \n",
              "25%      5.75   38.0   10.00    8.00   10.00   38.00   41.00  -17.00   41.00   \n",
              "50%     10.50   38.0   13.00   10.00   15.00   46.00   50.00   -6.00   48.50   \n",
              "75%     15.25   38.0   17.25   12.00   18.00   57.00   58.00   13.00   61.00   \n",
              "max     20.00   38.0   30.00   18.00   30.00  118.00   94.00   89.00   95.00   \n",
              "\n",
              "       pts/mp  attendance  season_start_yr      xg     xga     xgd  xgd/90  \n",
              "count  220.00      204.00           220.00  160.00  160.00  160.00  160.00  \n",
              "mean     1.37    26453.10          2019.00   48.84   48.84    0.00   -0.00  \n",
              "std      0.46    18088.53             3.17   11.62    8.62   17.13    0.45  \n",
              "min      0.42       91.00          2014.00   29.30   32.50  -33.00   -0.87  \n",
              "25%      1.08    13677.50          2016.00   40.58   42.88  -11.00   -0.29  \n",
              "50%      1.27    19957.00          2019.00   45.85   48.30   -3.15   -0.08  \n",
              "75%      1.61    37320.50          2022.00   53.98   54.42   11.00    0.29  \n",
              "max      2.50    83498.00          2024.00   91.50   76.20   49.50    1.30  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e574fed0-a94b-4821-af4e-e19fb83e34ff\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>rk</th>\n",
              "      <th>mp</th>\n",
              "      <th>w</th>\n",
              "      <th>d</th>\n",
              "      <th>l</th>\n",
              "      <th>gf</th>\n",
              "      <th>ga</th>\n",
              "      <th>gd</th>\n",
              "      <th>pts</th>\n",
              "      <th>pts/mp</th>\n",
              "      <th>attendance</th>\n",
              "      <th>season_start_yr</th>\n",
              "      <th>xg</th>\n",
              "      <th>xga</th>\n",
              "      <th>xgd</th>\n",
              "      <th>xgd/90</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>220.00</td>\n",
              "      <td>220.0</td>\n",
              "      <td>220.00</td>\n",
              "      <td>220.00</td>\n",
              "      <td>220.00</td>\n",
              "      <td>220.00</td>\n",
              "      <td>220.00</td>\n",
              "      <td>220.00</td>\n",
              "      <td>220.00</td>\n",
              "      <td>220.00</td>\n",
              "      <td>204.00</td>\n",
              "      <td>220.00</td>\n",
              "      <td>160.00</td>\n",
              "      <td>160.00</td>\n",
              "      <td>160.00</td>\n",
              "      <td>160.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>10.50</td>\n",
              "      <td>38.0</td>\n",
              "      <td>14.06</td>\n",
              "      <td>9.87</td>\n",
              "      <td>14.06</td>\n",
              "      <td>49.90</td>\n",
              "      <td>49.90</td>\n",
              "      <td>0.00</td>\n",
              "      <td>52.05</td>\n",
              "      <td>1.37</td>\n",
              "      <td>26453.10</td>\n",
              "      <td>2019.00</td>\n",
              "      <td>48.84</td>\n",
              "      <td>48.84</td>\n",
              "      <td>0.00</td>\n",
              "      <td>-0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>5.78</td>\n",
              "      <td>0.0</td>\n",
              "      <td>6.21</td>\n",
              "      <td>2.91</td>\n",
              "      <td>5.48</td>\n",
              "      <td>17.75</td>\n",
              "      <td>13.14</td>\n",
              "      <td>26.75</td>\n",
              "      <td>17.47</td>\n",
              "      <td>0.46</td>\n",
              "      <td>18088.53</td>\n",
              "      <td>3.17</td>\n",
              "      <td>11.62</td>\n",
              "      <td>8.62</td>\n",
              "      <td>17.13</td>\n",
              "      <td>0.45</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.00</td>\n",
              "      <td>38.0</td>\n",
              "      <td>3.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>1.00</td>\n",
              "      <td>22.00</td>\n",
              "      <td>18.00</td>\n",
              "      <td>-64.00</td>\n",
              "      <td>16.00</td>\n",
              "      <td>0.42</td>\n",
              "      <td>91.00</td>\n",
              "      <td>2014.00</td>\n",
              "      <td>29.30</td>\n",
              "      <td>32.50</td>\n",
              "      <td>-33.00</td>\n",
              "      <td>-0.87</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>5.75</td>\n",
              "      <td>38.0</td>\n",
              "      <td>10.00</td>\n",
              "      <td>8.00</td>\n",
              "      <td>10.00</td>\n",
              "      <td>38.00</td>\n",
              "      <td>41.00</td>\n",
              "      <td>-17.00</td>\n",
              "      <td>41.00</td>\n",
              "      <td>1.08</td>\n",
              "      <td>13677.50</td>\n",
              "      <td>2016.00</td>\n",
              "      <td>40.58</td>\n",
              "      <td>42.88</td>\n",
              "      <td>-11.00</td>\n",
              "      <td>-0.29</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>10.50</td>\n",
              "      <td>38.0</td>\n",
              "      <td>13.00</td>\n",
              "      <td>10.00</td>\n",
              "      <td>15.00</td>\n",
              "      <td>46.00</td>\n",
              "      <td>50.00</td>\n",
              "      <td>-6.00</td>\n",
              "      <td>48.50</td>\n",
              "      <td>1.27</td>\n",
              "      <td>19957.00</td>\n",
              "      <td>2019.00</td>\n",
              "      <td>45.85</td>\n",
              "      <td>48.30</td>\n",
              "      <td>-3.15</td>\n",
              "      <td>-0.08</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>15.25</td>\n",
              "      <td>38.0</td>\n",
              "      <td>17.25</td>\n",
              "      <td>12.00</td>\n",
              "      <td>18.00</td>\n",
              "      <td>57.00</td>\n",
              "      <td>58.00</td>\n",
              "      <td>13.00</td>\n",
              "      <td>61.00</td>\n",
              "      <td>1.61</td>\n",
              "      <td>37320.50</td>\n",
              "      <td>2022.00</td>\n",
              "      <td>53.98</td>\n",
              "      <td>54.42</td>\n",
              "      <td>11.00</td>\n",
              "      <td>0.29</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>20.00</td>\n",
              "      <td>38.0</td>\n",
              "      <td>30.00</td>\n",
              "      <td>18.00</td>\n",
              "      <td>30.00</td>\n",
              "      <td>118.00</td>\n",
              "      <td>94.00</td>\n",
              "      <td>89.00</td>\n",
              "      <td>95.00</td>\n",
              "      <td>2.50</td>\n",
              "      <td>83498.00</td>\n",
              "      <td>2024.00</td>\n",
              "      <td>91.50</td>\n",
              "      <td>76.20</td>\n",
              "      <td>49.50</td>\n",
              "      <td>1.30</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e574fed0-a94b-4821-af4e-e19fb83e34ff')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e574fed0-a94b-4821-af4e-e19fb83e34ff button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e574fed0-a94b-4821-af4e-e19fb83e34ff');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-094ce004-72a7-46eb-950f-3c8277d3901a\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-094ce004-72a7-46eb-950f-3c8277d3901a')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-094ce004-72a7-46eb-950f-3c8277d3901a button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"rk\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 74.54269855017898,\n        \"min\": 1.0,\n        \"max\": 220.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          220.0,\n          10.5,\n          15.25\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 67.58698099486321,\n        \"min\": 0.0,\n        \"max\": 220.0,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          220.0,\n          38.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"w\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 73.50895125279447,\n        \"min\": 3.0,\n        \"max\": 220.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          14.06,\n          13.0,\n          220.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"d\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 74.78189138134599,\n        \"min\": 2.0,\n        \"max\": 220.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          9.87,\n          10.0,\n          220.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"l\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 73.57144006241242,\n        \"min\": 1.0,\n        \"max\": 220.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          14.06,\n          15.0,\n          220.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gf\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 67.6141571053831,\n        \"min\": 17.75,\n        \"max\": 220.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          49.9,\n          46.0,\n          220.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ga\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 66.30043029379867,\n        \"min\": 13.14,\n        \"max\": 220.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          49.9,\n          50.0,\n          220.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gd\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 87.0651887852676,\n        \"min\": -64.0,\n        \"max\": 220.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.0,\n          -6.0,\n          220.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pts\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 66.00516576104371,\n        \"min\": 16.0,\n        \"max\": 220.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          52.05,\n          48.5,\n          220.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pts/mp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 77.34463993571703,\n        \"min\": 0.42,\n        \"max\": 220.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1.37,\n          1.27,\n          220.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"attendance\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 26759.66665252227,\n        \"min\": 91.0,\n        \"max\": 83498.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          26453.1,\n          19957.0,\n          204.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"season_start_yr\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 884.8667048760589,\n        \"min\": 3.17,\n        \"max\": 2024.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          220.0,\n          2019.0,\n          2022.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"xg\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 46.3113079179527,\n        \"min\": 11.62,\n        \"max\": 160.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          48.84,\n          45.85,\n          160.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"xga\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 45.09636285618989,\n        \"min\": 8.62,\n        \"max\": 160.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          48.84,\n          48.3,\n          160.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"xgd\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 59.93958934984933,\n        \"min\": -33.0,\n        \"max\": 160.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.0,\n          -3.15,\n          160.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"xgd/90\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 56.53158914649907,\n        \"min\": -0.87,\n        \"max\": 160.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          -0.0,\n          -0.08,\n          160.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 54
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Teams that won the League in the Last 11 Years (Excluding this Season, of course)\n",
        "\n",
        "win_teams = df[(df['rk'] == 1) & (df['season_start_yr'] < 2024)]\n",
        "\n",
        "win_teams"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 536
        },
        "id": "AOPVAVuGM391",
        "outputId": "18b217d5-8cde-4f81-ae17-f07e8f855be2"
      },
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     rk            squad  mp   w  d  l   gf  ga  gd  pts  pts/mp  attendance  \\\n",
              "0     1        Barcelona  38  30  4  4  110  21  89   94    2.47     77632.0   \n",
              "20    1        Barcelona  38  29  4  5  112  29  83   91    2.39     74655.0   \n",
              "40    1      Real Madrid  38  29  6  3  106  41  65   93    2.45     71977.0   \n",
              "60    1        Barcelona  38  28  9  1   99  29  70   93    2.45     67142.0   \n",
              "80    1        Barcelona  38  26  9  3   90  36  54   87    2.29     76104.0   \n",
              "100   1      Real Madrid  38  26  9  3   70  25  45   87    2.29     45833.0   \n",
              "120   1  Atlético Madrid  38  26  8  4   67  25  42   86    2.26         NaN   \n",
              "140   1      Real Madrid  38  26  8  4   80  31  49   86    2.26     41235.0   \n",
              "160   1        Barcelona  38  28  4  6   70  20  50   88    2.32     83498.0   \n",
              "180   1      Real Madrid  38  29  8  1   87  26  61   95    2.50     72061.0   \n",
              "\n",
              "             top_team_scorer             goalkeeper  \\\n",
              "0          Lionel Messi - 43          Claudio Bravo   \n",
              "20          Luis Suárez - 40          Claudio Bravo   \n",
              "40    Cristiano Ronaldo - 25           Keylor Navas   \n",
              "60         Lionel Messi - 34  Marc-André ter Stegen   \n",
              "80         Lionel Messi - 36  Marc-André ter Stegen   \n",
              "100       Karim Benzema - 21       Thibaut Courtois   \n",
              "120         Luis Suárez - 21              Jan Oblak   \n",
              "140       Karim Benzema - 27       Thibaut Courtois   \n",
              "160  Robert Lewandowski - 23  Marc-André ter Stegen   \n",
              "180     Jude Bellingham - 19           Andriy Lunin   \n",
              "\n",
              "                                           notes  season_start_yr    xg   xga  \\\n",
              "0    → Champions League via Champions League win             2014   NaN   NaN   \n",
              "20          → Champions League via league finish             2015   NaN   NaN   \n",
              "40   → Champions League via Champions League win             2016   NaN   NaN   \n",
              "60          → Champions League via league finish             2017  83.5  41.9   \n",
              "80          → Champions League via league finish             2018  75.8  45.3   \n",
              "100         → Champions League via league finish             2019  67.9  33.3   \n",
              "120         → Champions League via league finish             2020  52.8  37.1   \n",
              "140         → Champions League via league finish             2021  71.7  43.9   \n",
              "160         → Champions League via league finish             2022  75.5  33.2   \n",
              "180         → Champions League via league finish             2023  68.8  35.4   \n",
              "\n",
              "      xgd  xgd/90  \n",
              "0     NaN     NaN  \n",
              "20    NaN     NaN  \n",
              "40    NaN     NaN  \n",
              "60   41.6    1.09  \n",
              "80   30.5    0.80  \n",
              "100  34.6    0.91  \n",
              "120  15.7    0.41  \n",
              "140  27.8    0.73  \n",
              "160  42.3    1.11  \n",
              "180  33.4    0.88  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b41c29b7-863f-45b9-a245-34c8a83358f4\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>rk</th>\n",
              "      <th>squad</th>\n",
              "      <th>mp</th>\n",
              "      <th>w</th>\n",
              "      <th>d</th>\n",
              "      <th>l</th>\n",
              "      <th>gf</th>\n",
              "      <th>ga</th>\n",
              "      <th>gd</th>\n",
              "      <th>pts</th>\n",
              "      <th>pts/mp</th>\n",
              "      <th>attendance</th>\n",
              "      <th>top_team_scorer</th>\n",
              "      <th>goalkeeper</th>\n",
              "      <th>notes</th>\n",
              "      <th>season_start_yr</th>\n",
              "      <th>xg</th>\n",
              "      <th>xga</th>\n",
              "      <th>xgd</th>\n",
              "      <th>xgd/90</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>Barcelona</td>\n",
              "      <td>38</td>\n",
              "      <td>30</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>110</td>\n",
              "      <td>21</td>\n",
              "      <td>89</td>\n",
              "      <td>94</td>\n",
              "      <td>2.47</td>\n",
              "      <td>77632.0</td>\n",
              "      <td>Lionel Messi - 43</td>\n",
              "      <td>Claudio Bravo</td>\n",
              "      <td>→ Champions League via Champions League win</td>\n",
              "      <td>2014</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>1</td>\n",
              "      <td>Barcelona</td>\n",
              "      <td>38</td>\n",
              "      <td>29</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>112</td>\n",
              "      <td>29</td>\n",
              "      <td>83</td>\n",
              "      <td>91</td>\n",
              "      <td>2.39</td>\n",
              "      <td>74655.0</td>\n",
              "      <td>Luis Suárez - 40</td>\n",
              "      <td>Claudio Bravo</td>\n",
              "      <td>→ Champions League via league finish</td>\n",
              "      <td>2015</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>40</th>\n",
              "      <td>1</td>\n",
              "      <td>Real Madrid</td>\n",
              "      <td>38</td>\n",
              "      <td>29</td>\n",
              "      <td>6</td>\n",
              "      <td>3</td>\n",
              "      <td>106</td>\n",
              "      <td>41</td>\n",
              "      <td>65</td>\n",
              "      <td>93</td>\n",
              "      <td>2.45</td>\n",
              "      <td>71977.0</td>\n",
              "      <td>Cristiano Ronaldo - 25</td>\n",
              "      <td>Keylor Navas</td>\n",
              "      <td>→ Champions League via Champions League win</td>\n",
              "      <td>2016</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>60</th>\n",
              "      <td>1</td>\n",
              "      <td>Barcelona</td>\n",
              "      <td>38</td>\n",
              "      <td>28</td>\n",
              "      <td>9</td>\n",
              "      <td>1</td>\n",
              "      <td>99</td>\n",
              "      <td>29</td>\n",
              "      <td>70</td>\n",
              "      <td>93</td>\n",
              "      <td>2.45</td>\n",
              "      <td>67142.0</td>\n",
              "      <td>Lionel Messi - 34</td>\n",
              "      <td>Marc-André ter Stegen</td>\n",
              "      <td>→ Champions League via league finish</td>\n",
              "      <td>2017</td>\n",
              "      <td>83.5</td>\n",
              "      <td>41.9</td>\n",
              "      <td>41.6</td>\n",
              "      <td>1.09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>80</th>\n",
              "      <td>1</td>\n",
              "      <td>Barcelona</td>\n",
              "      <td>38</td>\n",
              "      <td>26</td>\n",
              "      <td>9</td>\n",
              "      <td>3</td>\n",
              "      <td>90</td>\n",
              "      <td>36</td>\n",
              "      <td>54</td>\n",
              "      <td>87</td>\n",
              "      <td>2.29</td>\n",
              "      <td>76104.0</td>\n",
              "      <td>Lionel Messi - 36</td>\n",
              "      <td>Marc-André ter Stegen</td>\n",
              "      <td>→ Champions League via league finish</td>\n",
              "      <td>2018</td>\n",
              "      <td>75.8</td>\n",
              "      <td>45.3</td>\n",
              "      <td>30.5</td>\n",
              "      <td>0.80</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>100</th>\n",
              "      <td>1</td>\n",
              "      <td>Real Madrid</td>\n",
              "      <td>38</td>\n",
              "      <td>26</td>\n",
              "      <td>9</td>\n",
              "      <td>3</td>\n",
              "      <td>70</td>\n",
              "      <td>25</td>\n",
              "      <td>45</td>\n",
              "      <td>87</td>\n",
              "      <td>2.29</td>\n",
              "      <td>45833.0</td>\n",
              "      <td>Karim Benzema - 21</td>\n",
              "      <td>Thibaut Courtois</td>\n",
              "      <td>→ Champions League via league finish</td>\n",
              "      <td>2019</td>\n",
              "      <td>67.9</td>\n",
              "      <td>33.3</td>\n",
              "      <td>34.6</td>\n",
              "      <td>0.91</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>120</th>\n",
              "      <td>1</td>\n",
              "      <td>Atlético Madrid</td>\n",
              "      <td>38</td>\n",
              "      <td>26</td>\n",
              "      <td>8</td>\n",
              "      <td>4</td>\n",
              "      <td>67</td>\n",
              "      <td>25</td>\n",
              "      <td>42</td>\n",
              "      <td>86</td>\n",
              "      <td>2.26</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Luis Suárez - 21</td>\n",
              "      <td>Jan Oblak</td>\n",
              "      <td>→ Champions League via league finish</td>\n",
              "      <td>2020</td>\n",
              "      <td>52.8</td>\n",
              "      <td>37.1</td>\n",
              "      <td>15.7</td>\n",
              "      <td>0.41</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>140</th>\n",
              "      <td>1</td>\n",
              "      <td>Real Madrid</td>\n",
              "      <td>38</td>\n",
              "      <td>26</td>\n",
              "      <td>8</td>\n",
              "      <td>4</td>\n",
              "      <td>80</td>\n",
              "      <td>31</td>\n",
              "      <td>49</td>\n",
              "      <td>86</td>\n",
              "      <td>2.26</td>\n",
              "      <td>41235.0</td>\n",
              "      <td>Karim Benzema - 27</td>\n",
              "      <td>Thibaut Courtois</td>\n",
              "      <td>→ Champions League via league finish</td>\n",
              "      <td>2021</td>\n",
              "      <td>71.7</td>\n",
              "      <td>43.9</td>\n",
              "      <td>27.8</td>\n",
              "      <td>0.73</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>160</th>\n",
              "      <td>1</td>\n",
              "      <td>Barcelona</td>\n",
              "      <td>38</td>\n",
              "      <td>28</td>\n",
              "      <td>4</td>\n",
              "      <td>6</td>\n",
              "      <td>70</td>\n",
              "      <td>20</td>\n",
              "      <td>50</td>\n",
              "      <td>88</td>\n",
              "      <td>2.32</td>\n",
              "      <td>83498.0</td>\n",
              "      <td>Robert Lewandowski - 23</td>\n",
              "      <td>Marc-André ter Stegen</td>\n",
              "      <td>→ Champions League via league finish</td>\n",
              "      <td>2022</td>\n",
              "      <td>75.5</td>\n",
              "      <td>33.2</td>\n",
              "      <td>42.3</td>\n",
              "      <td>1.11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>180</th>\n",
              "      <td>1</td>\n",
              "      <td>Real Madrid</td>\n",
              "      <td>38</td>\n",
              "      <td>29</td>\n",
              "      <td>8</td>\n",
              "      <td>1</td>\n",
              "      <td>87</td>\n",
              "      <td>26</td>\n",
              "      <td>61</td>\n",
              "      <td>95</td>\n",
              "      <td>2.50</td>\n",
              "      <td>72061.0</td>\n",
              "      <td>Jude Bellingham - 19</td>\n",
              "      <td>Andriy Lunin</td>\n",
              "      <td>→ Champions League via league finish</td>\n",
              "      <td>2023</td>\n",
              "      <td>68.8</td>\n",
              "      <td>35.4</td>\n",
              "      <td>33.4</td>\n",
              "      <td>0.88</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b41c29b7-863f-45b9-a245-34c8a83358f4')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b41c29b7-863f-45b9-a245-34c8a83358f4 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b41c29b7-863f-45b9-a245-34c8a83358f4');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-039d1883-7f5e-4367-9485-f0df8df4ce96\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-039d1883-7f5e-4367-9485-f0df8df4ce96')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-039d1883-7f5e-4367-9485-f0df8df4ce96 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_ba10fa98-3b36-40bc-a104-52379bc310b3\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('win_teams')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_ba10fa98-3b36-40bc-a104-52379bc310b3 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('win_teams');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "win_teams",
              "summary": "{\n  \"name\": \"win_teams\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"rk\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 1,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"squad\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Barcelona\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 38,\n        \"max\": 38,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          38\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"w\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 26,\n        \"max\": 30,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          29\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"d\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 4,\n        \"max\": 9,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"l\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 6,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gf\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17,\n        \"min\": 67,\n        \"max\": 112,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          80\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ga\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6,\n        \"min\": 20,\n        \"max\": 41,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          29\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gd\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15,\n        \"min\": 42,\n        \"max\": 89,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          50\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pts\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 86,\n        \"max\": 95,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          94\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pts/mp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0940212741883454,\n        \"min\": 2.26,\n        \"max\": 2.5,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          2.47\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"attendance\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14505.71937202702,\n        \"min\": 41235.0,\n        \"max\": 83498.0,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          83498.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"top_team_scorer\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"Robert Lewandowski - 23\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"goalkeeper\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"Claudio Bravo\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"notes\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"\\u2192 Champions League via league finish\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"season_start_yr\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 2014,\n        \"max\": 2023,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          2022\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"xg\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9.535697342592405,\n        \"min\": 52.8,\n        \"max\": 83.5,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          83.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"xga\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.0597854274098,\n        \"min\": 33.2,\n        \"max\": 45.3,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          41.9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"xgd\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9.055700651286696,\n        \"min\": 15.7,\n        \"max\": 42.3,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          41.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"xgd/90\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.23809761903571444,\n        \"min\": 0.41,\n        \"max\": 1.11,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1.09\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 55
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Computing the Average \"Points per Match\" for the past 10 La Liga Champions\n",
        "avg_pts_winners = win_teams['pts/mp'].mean().round(2)\n",
        "\n",
        "print(f\"The Average Points per Match for the Past 10 La Liga Champions is: {avg_pts_winners:.2f}.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "V0Qwl4LNNRMt",
        "outputId": "a65561f4-4fdf-4046-dc90-63fd8f37be49"
      },
      "execution_count": 56,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The Average Points per Match for the Past 10 La Liga Champions is: 2.37.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Feature Engineering:\n",
        "\n",
        "Creating a Column with Binary Outcome for a Team being Champion or Not."
      ],
      "metadata": {
        "id": "loiN0LW4OvQA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Converting \"rk\" to Binary: '1' if Team was Champion; '0' Otherwise\n",
        "df[\"is_champ\"] = (df['rk'] == 1).astype(int)\n",
        "\n",
        "# Filtering for only Champion Teams\n",
        "champs = df[df['is_champ'] == 1]\n",
        "champs = champs[champs['season_start_yr'] != 2024]\n",
        "\n",
        "champs"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 536
        },
        "id": "01mza1muOfD8",
        "outputId": "3f7f1a8b-3162-41d4-81d2-c333f9157349"
      },
      "execution_count": 57,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     rk            squad  mp   w  d  l   gf  ga  gd  pts  pts/mp  attendance  \\\n",
              "0     1        Barcelona  38  30  4  4  110  21  89   94    2.47     77632.0   \n",
              "20    1        Barcelona  38  29  4  5  112  29  83   91    2.39     74655.0   \n",
              "40    1      Real Madrid  38  29  6  3  106  41  65   93    2.45     71977.0   \n",
              "60    1        Barcelona  38  28  9  1   99  29  70   93    2.45     67142.0   \n",
              "80    1        Barcelona  38  26  9  3   90  36  54   87    2.29     76104.0   \n",
              "100   1      Real Madrid  38  26  9  3   70  25  45   87    2.29     45833.0   \n",
              "120   1  Atlético Madrid  38  26  8  4   67  25  42   86    2.26         NaN   \n",
              "140   1      Real Madrid  38  26  8  4   80  31  49   86    2.26     41235.0   \n",
              "160   1        Barcelona  38  28  4  6   70  20  50   88    2.32     83498.0   \n",
              "180   1      Real Madrid  38  29  8  1   87  26  61   95    2.50     72061.0   \n",
              "\n",
              "             top_team_scorer             goalkeeper  \\\n",
              "0          Lionel Messi - 43          Claudio Bravo   \n",
              "20          Luis Suárez - 40          Claudio Bravo   \n",
              "40    Cristiano Ronaldo - 25           Keylor Navas   \n",
              "60         Lionel Messi - 34  Marc-André ter Stegen   \n",
              "80         Lionel Messi - 36  Marc-André ter Stegen   \n",
              "100       Karim Benzema - 21       Thibaut Courtois   \n",
              "120         Luis Suárez - 21              Jan Oblak   \n",
              "140       Karim Benzema - 27       Thibaut Courtois   \n",
              "160  Robert Lewandowski - 23  Marc-André ter Stegen   \n",
              "180     Jude Bellingham - 19           Andriy Lunin   \n",
              "\n",
              "                                           notes  season_start_yr    xg   xga  \\\n",
              "0    → Champions League via Champions League win             2014   NaN   NaN   \n",
              "20          → Champions League via league finish             2015   NaN   NaN   \n",
              "40   → Champions League via Champions League win             2016   NaN   NaN   \n",
              "60          → Champions League via league finish             2017  83.5  41.9   \n",
              "80          → Champions League via league finish             2018  75.8  45.3   \n",
              "100         → Champions League via league finish             2019  67.9  33.3   \n",
              "120         → Champions League via league finish             2020  52.8  37.1   \n",
              "140         → Champions League via league finish             2021  71.7  43.9   \n",
              "160         → Champions League via league finish             2022  75.5  33.2   \n",
              "180         → Champions League via league finish             2023  68.8  35.4   \n",
              "\n",
              "      xgd  xgd/90  is_champ  \n",
              "0     NaN     NaN         1  \n",
              "20    NaN     NaN         1  \n",
              "40    NaN     NaN         1  \n",
              "60   41.6    1.09         1  \n",
              "80   30.5    0.80         1  \n",
              "100  34.6    0.91         1  \n",
              "120  15.7    0.41         1  \n",
              "140  27.8    0.73         1  \n",
              "160  42.3    1.11         1  \n",
              "180  33.4    0.88         1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-87b66d1a-9100-427d-883a-d5a87ced96db\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>rk</th>\n",
              "      <th>squad</th>\n",
              "      <th>mp</th>\n",
              "      <th>w</th>\n",
              "      <th>d</th>\n",
              "      <th>l</th>\n",
              "      <th>gf</th>\n",
              "      <th>ga</th>\n",
              "      <th>gd</th>\n",
              "      <th>pts</th>\n",
              "      <th>pts/mp</th>\n",
              "      <th>attendance</th>\n",
              "      <th>top_team_scorer</th>\n",
              "      <th>goalkeeper</th>\n",
              "      <th>notes</th>\n",
              "      <th>season_start_yr</th>\n",
              "      <th>xg</th>\n",
              "      <th>xga</th>\n",
              "      <th>xgd</th>\n",
              "      <th>xgd/90</th>\n",
              "      <th>is_champ</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>Barcelona</td>\n",
              "      <td>38</td>\n",
              "      <td>30</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>110</td>\n",
              "      <td>21</td>\n",
              "      <td>89</td>\n",
              "      <td>94</td>\n",
              "      <td>2.47</td>\n",
              "      <td>77632.0</td>\n",
              "      <td>Lionel Messi - 43</td>\n",
              "      <td>Claudio Bravo</td>\n",
              "      <td>→ Champions League via Champions League win</td>\n",
              "      <td>2014</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>1</td>\n",
              "      <td>Barcelona</td>\n",
              "      <td>38</td>\n",
              "      <td>29</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>112</td>\n",
              "      <td>29</td>\n",
              "      <td>83</td>\n",
              "      <td>91</td>\n",
              "      <td>2.39</td>\n",
              "      <td>74655.0</td>\n",
              "      <td>Luis Suárez - 40</td>\n",
              "      <td>Claudio Bravo</td>\n",
              "      <td>→ Champions League via league finish</td>\n",
              "      <td>2015</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>40</th>\n",
              "      <td>1</td>\n",
              "      <td>Real Madrid</td>\n",
              "      <td>38</td>\n",
              "      <td>29</td>\n",
              "      <td>6</td>\n",
              "      <td>3</td>\n",
              "      <td>106</td>\n",
              "      <td>41</td>\n",
              "      <td>65</td>\n",
              "      <td>93</td>\n",
              "      <td>2.45</td>\n",
              "      <td>71977.0</td>\n",
              "      <td>Cristiano Ronaldo - 25</td>\n",
              "      <td>Keylor Navas</td>\n",
              "      <td>→ Champions League via Champions League win</td>\n",
              "      <td>2016</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>60</th>\n",
              "      <td>1</td>\n",
              "      <td>Barcelona</td>\n",
              "      <td>38</td>\n",
              "      <td>28</td>\n",
              "      <td>9</td>\n",
              "      <td>1</td>\n",
              "      <td>99</td>\n",
              "      <td>29</td>\n",
              "      <td>70</td>\n",
              "      <td>93</td>\n",
              "      <td>2.45</td>\n",
              "      <td>67142.0</td>\n",
              "      <td>Lionel Messi - 34</td>\n",
              "      <td>Marc-André ter Stegen</td>\n",
              "      <td>→ Champions League via league finish</td>\n",
              "      <td>2017</td>\n",
              "      <td>83.5</td>\n",
              "      <td>41.9</td>\n",
              "      <td>41.6</td>\n",
              "      <td>1.09</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>80</th>\n",
              "      <td>1</td>\n",
              "      <td>Barcelona</td>\n",
              "      <td>38</td>\n",
              "      <td>26</td>\n",
              "      <td>9</td>\n",
              "      <td>3</td>\n",
              "      <td>90</td>\n",
              "      <td>36</td>\n",
              "      <td>54</td>\n",
              "      <td>87</td>\n",
              "      <td>2.29</td>\n",
              "      <td>76104.0</td>\n",
              "      <td>Lionel Messi - 36</td>\n",
              "      <td>Marc-André ter Stegen</td>\n",
              "      <td>→ Champions League via league finish</td>\n",
              "      <td>2018</td>\n",
              "      <td>75.8</td>\n",
              "      <td>45.3</td>\n",
              "      <td>30.5</td>\n",
              "      <td>0.80</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>100</th>\n",
              "      <td>1</td>\n",
              "      <td>Real Madrid</td>\n",
              "      <td>38</td>\n",
              "      <td>26</td>\n",
              "      <td>9</td>\n",
              "      <td>3</td>\n",
              "      <td>70</td>\n",
              "      <td>25</td>\n",
              "      <td>45</td>\n",
              "      <td>87</td>\n",
              "      <td>2.29</td>\n",
              "      <td>45833.0</td>\n",
              "      <td>Karim Benzema - 21</td>\n",
              "      <td>Thibaut Courtois</td>\n",
              "      <td>→ Champions League via league finish</td>\n",
              "      <td>2019</td>\n",
              "      <td>67.9</td>\n",
              "      <td>33.3</td>\n",
              "      <td>34.6</td>\n",
              "      <td>0.91</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>120</th>\n",
              "      <td>1</td>\n",
              "      <td>Atlético Madrid</td>\n",
              "      <td>38</td>\n",
              "      <td>26</td>\n",
              "      <td>8</td>\n",
              "      <td>4</td>\n",
              "      <td>67</td>\n",
              "      <td>25</td>\n",
              "      <td>42</td>\n",
              "      <td>86</td>\n",
              "      <td>2.26</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Luis Suárez - 21</td>\n",
              "      <td>Jan Oblak</td>\n",
              "      <td>→ Champions League via league finish</td>\n",
              "      <td>2020</td>\n",
              "      <td>52.8</td>\n",
              "      <td>37.1</td>\n",
              "      <td>15.7</td>\n",
              "      <td>0.41</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>140</th>\n",
              "      <td>1</td>\n",
              "      <td>Real Madrid</td>\n",
              "      <td>38</td>\n",
              "      <td>26</td>\n",
              "      <td>8</td>\n",
              "      <td>4</td>\n",
              "      <td>80</td>\n",
              "      <td>31</td>\n",
              "      <td>49</td>\n",
              "      <td>86</td>\n",
              "      <td>2.26</td>\n",
              "      <td>41235.0</td>\n",
              "      <td>Karim Benzema - 27</td>\n",
              "      <td>Thibaut Courtois</td>\n",
              "      <td>→ Champions League via league finish</td>\n",
              "      <td>2021</td>\n",
              "      <td>71.7</td>\n",
              "      <td>43.9</td>\n",
              "      <td>27.8</td>\n",
              "      <td>0.73</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>160</th>\n",
              "      <td>1</td>\n",
              "      <td>Barcelona</td>\n",
              "      <td>38</td>\n",
              "      <td>28</td>\n",
              "      <td>4</td>\n",
              "      <td>6</td>\n",
              "      <td>70</td>\n",
              "      <td>20</td>\n",
              "      <td>50</td>\n",
              "      <td>88</td>\n",
              "      <td>2.32</td>\n",
              "      <td>83498.0</td>\n",
              "      <td>Robert Lewandowski - 23</td>\n",
              "      <td>Marc-André ter Stegen</td>\n",
              "      <td>→ Champions League via league finish</td>\n",
              "      <td>2022</td>\n",
              "      <td>75.5</td>\n",
              "      <td>33.2</td>\n",
              "      <td>42.3</td>\n",
              "      <td>1.11</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>180</th>\n",
              "      <td>1</td>\n",
              "      <td>Real Madrid</td>\n",
              "      <td>38</td>\n",
              "      <td>29</td>\n",
              "      <td>8</td>\n",
              "      <td>1</td>\n",
              "      <td>87</td>\n",
              "      <td>26</td>\n",
              "      <td>61</td>\n",
              "      <td>95</td>\n",
              "      <td>2.50</td>\n",
              "      <td>72061.0</td>\n",
              "      <td>Jude Bellingham - 19</td>\n",
              "      <td>Andriy Lunin</td>\n",
              "      <td>→ Champions League via league finish</td>\n",
              "      <td>2023</td>\n",
              "      <td>68.8</td>\n",
              "      <td>35.4</td>\n",
              "      <td>33.4</td>\n",
              "      <td>0.88</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-87b66d1a-9100-427d-883a-d5a87ced96db')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-87b66d1a-9100-427d-883a-d5a87ced96db button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-87b66d1a-9100-427d-883a-d5a87ced96db');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-a5d327ea-f036-4fee-8bf6-051dd5e477d2\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a5d327ea-f036-4fee-8bf6-051dd5e477d2')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-a5d327ea-f036-4fee-8bf6-051dd5e477d2 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_cff68086-4b83-4645-8e11-1e23afbc5240\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('champs')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_cff68086-4b83-4645-8e11-1e23afbc5240 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('champs');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "champs"
            }
          },
          "metadata": {},
          "execution_count": 57
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize = (10, 5))\n",
        "plt.plot(champs['season_start_yr'], champs['pts/mp'], marker = 'o', linestyle = '-', color = 'b')\n",
        "plt.axhline(y = avg_pts_winners, color = 'r', linestyle = '-', label = f'Mean: {avg_pts_winners:.2f}')\n",
        "plt.xlabel(\"Year\")\n",
        "plt.ylabel(\"Points per Match\")\n",
        "plt.title(\"Trend of Points per Match of League Winners Over Time\")\n",
        "plt.grid(True)\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 487
        },
        "id": "e6vKKsN0PN7s",
        "outputId": "684fac00-d838-4dc3-b83b-6e3c3906fc27"
      },
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Machine Learning & Predictive Modeling"
      ],
      "metadata": {
        "id": "lWzp-qYlQ2zG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.ensemble import RandomForestClassifier # ML Model\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, roc_auc_score, log_loss # Model Evaluation\n",
        "from sklearn.model_selection import cross_val_score # For Cross-Validation"
      ],
      "metadata": {
        "id": "vtW1g2RxQkdC"
      },
      "execution_count": 59,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Further **Feature Engineering**"
      ],
      "metadata": {
        "id": "kSDCMyE0RNnu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Calculating how many Games each Team has left to Play (Total Games in a La Liga Season: 38)\n",
        "df['games_left'] = 38 - df['mp']\n",
        "\n",
        "# Estimating the Final number of Points if each Team keeps their Current Pace\n",
        "df['projected_pts'] = df['pts'] + (df['games_left']*df['pts/mp'])"
      ],
      "metadata": {
        "id": "Qkzo-M1VRNP_"
      },
      "execution_count": 60,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.tail(7)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 375
        },
        "id": "myWuQ1GqRj6u",
        "outputId": "b7cd4ff1-6c61-4acb-a0ee-df0de3c8d44c"
      },
      "execution_count": 61,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     rk       squad  mp   w   d   l  gf  ga  gd  pts  pts/mp  attendance  \\\n",
              "213  14    Espanyol  38  11   9  18  40  51 -11   42    1.11     25640.0   \n",
              "214  15      Alavés  38  10  12  16  38  48 -10   42    1.11     17318.0   \n",
              "215  16      Girona  38  11   8  19  44  60 -16   41    1.08     11657.0   \n",
              "216  17     Sevilla  38  10  11  17  42  55 -13   41    1.08     35619.0   \n",
              "217  18     Leganés  38   9  13  16  39  56 -17   40    1.05     11135.0   \n",
              "218  19  Las Palmas  38   8   8  22  40  61 -21   32    0.84     23010.0   \n",
              "219  20  Valladolid  38   4   4  30  26  90 -64   16    0.42     19831.0   \n",
              "\n",
              "           top_team_scorer        goalkeeper      notes  season_start_yr  \\\n",
              "213        Javi Puado - 12       Joan García        NaN             2024   \n",
              "214              Kiké - 13    Antonio Sivera        NaN             2024   \n",
              "215  Cristhian Stuani - 11   Paulo Gazzaniga        NaN             2024   \n",
              "216    Dodi Lukebakio - 11      Ørjan Nyland        NaN             2024   \n",
              "217          Dani Raba - 8   Marko Dmitrović  Relegated             2024   \n",
              "218       Fábio Silva - 10  Jasper Cillessen  Relegated             2024   \n",
              "219      Mamadou Sylla - 5   Karl Jakob Hein  Relegated             2024   \n",
              "\n",
              "       xg   xga   xgd  xgd/90  is_champ  games_left  projected_pts  \n",
              "213  34.4  53.8 -19.4   -0.51         0           0           42.0  \n",
              "214  42.8  47.0  -4.2   -0.11         0           0           42.0  \n",
              "215  42.5  50.4  -8.0   -0.21         0           0           41.0  \n",
              "216  42.7  47.4  -4.7   -0.12         0           0           41.0  \n",
              "217  36.0  59.4 -23.4   -0.62         0           0           40.0  \n",
              "218  36.3  66.8 -30.5   -0.80         0           0           32.0  \n",
              "219  34.6  67.6 -33.0   -0.87         0           0           16.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-382d7522-77a2-41ce-b8d5-b996b5c6f3d8\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>rk</th>\n",
              "      <th>squad</th>\n",
              "      <th>mp</th>\n",
              "      <th>w</th>\n",
              "      <th>d</th>\n",
              "      <th>l</th>\n",
              "      <th>gf</th>\n",
              "      <th>ga</th>\n",
              "      <th>gd</th>\n",
              "      <th>pts</th>\n",
              "      <th>pts/mp</th>\n",
              "      <th>attendance</th>\n",
              "      <th>top_team_scorer</th>\n",
              "      <th>goalkeeper</th>\n",
              "      <th>notes</th>\n",
              "      <th>season_start_yr</th>\n",
              "      <th>xg</th>\n",
              "      <th>xga</th>\n",
              "      <th>xgd</th>\n",
              "      <th>xgd/90</th>\n",
              "      <th>is_champ</th>\n",
              "      <th>games_left</th>\n",
              "      <th>projected_pts</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>213</th>\n",
              "      <td>14</td>\n",
              "      <td>Espanyol</td>\n",
              "      <td>38</td>\n",
              "      <td>11</td>\n",
              "      <td>9</td>\n",
              "      <td>18</td>\n",
              "      <td>40</td>\n",
              "      <td>51</td>\n",
              "      <td>-11</td>\n",
              "      <td>42</td>\n",
              "      <td>1.11</td>\n",
              "      <td>25640.0</td>\n",
              "      <td>Javi Puado - 12</td>\n",
              "      <td>Joan García</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2024</td>\n",
              "      <td>34.4</td>\n",
              "      <td>53.8</td>\n",
              "      <td>-19.4</td>\n",
              "      <td>-0.51</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>42.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>214</th>\n",
              "      <td>15</td>\n",
              "      <td>Alavés</td>\n",
              "      <td>38</td>\n",
              "      <td>10</td>\n",
              "      <td>12</td>\n",
              "      <td>16</td>\n",
              "      <td>38</td>\n",
              "      <td>48</td>\n",
              "      <td>-10</td>\n",
              "      <td>42</td>\n",
              "      <td>1.11</td>\n",
              "      <td>17318.0</td>\n",
              "      <td>Kiké - 13</td>\n",
              "      <td>Antonio Sivera</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2024</td>\n",
              "      <td>42.8</td>\n",
              "      <td>47.0</td>\n",
              "      <td>-4.2</td>\n",
              "      <td>-0.11</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>42.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>215</th>\n",
              "      <td>16</td>\n",
              "      <td>Girona</td>\n",
              "      <td>38</td>\n",
              "      <td>11</td>\n",
              "      <td>8</td>\n",
              "      <td>19</td>\n",
              "      <td>44</td>\n",
              "      <td>60</td>\n",
              "      <td>-16</td>\n",
              "      <td>41</td>\n",
              "      <td>1.08</td>\n",
              "      <td>11657.0</td>\n",
              "      <td>Cristhian Stuani - 11</td>\n",
              "      <td>Paulo Gazzaniga</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2024</td>\n",
              "      <td>42.5</td>\n",
              "      <td>50.4</td>\n",
              "      <td>-8.0</td>\n",
              "      <td>-0.21</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>41.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>216</th>\n",
              "      <td>17</td>\n",
              "      <td>Sevilla</td>\n",
              "      <td>38</td>\n",
              "      <td>10</td>\n",
              "      <td>11</td>\n",
              "      <td>17</td>\n",
              "      <td>42</td>\n",
              "      <td>55</td>\n",
              "      <td>-13</td>\n",
              "      <td>41</td>\n",
              "      <td>1.08</td>\n",
              "      <td>35619.0</td>\n",
              "      <td>Dodi Lukebakio - 11</td>\n",
              "      <td>Ørjan Nyland</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2024</td>\n",
              "      <td>42.7</td>\n",
              "      <td>47.4</td>\n",
              "      <td>-4.7</td>\n",
              "      <td>-0.12</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>41.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>217</th>\n",
              "      <td>18</td>\n",
              "      <td>Leganés</td>\n",
              "      <td>38</td>\n",
              "      <td>9</td>\n",
              "      <td>13</td>\n",
              "      <td>16</td>\n",
              "      <td>39</td>\n",
              "      <td>56</td>\n",
              "      <td>-17</td>\n",
              "      <td>40</td>\n",
              "      <td>1.05</td>\n",
              "      <td>11135.0</td>\n",
              "      <td>Dani Raba - 8</td>\n",
              "      <td>Marko Dmitrović</td>\n",
              "      <td>Relegated</td>\n",
              "      <td>2024</td>\n",
              "      <td>36.0</td>\n",
              "      <td>59.4</td>\n",
              "      <td>-23.4</td>\n",
              "      <td>-0.62</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>40.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>218</th>\n",
              "      <td>19</td>\n",
              "      <td>Las Palmas</td>\n",
              "      <td>38</td>\n",
              "      <td>8</td>\n",
              "      <td>8</td>\n",
              "      <td>22</td>\n",
              "      <td>40</td>\n",
              "      <td>61</td>\n",
              "      <td>-21</td>\n",
              "      <td>32</td>\n",
              "      <td>0.84</td>\n",
              "      <td>23010.0</td>\n",
              "      <td>Fábio Silva - 10</td>\n",
              "      <td>Jasper Cillessen</td>\n",
              "      <td>Relegated</td>\n",
              "      <td>2024</td>\n",
              "      <td>36.3</td>\n",
              "      <td>66.8</td>\n",
              "      <td>-30.5</td>\n",
              "      <td>-0.80</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>32.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>219</th>\n",
              "      <td>20</td>\n",
              "      <td>Valladolid</td>\n",
              "      <td>38</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>30</td>\n",
              "      <td>26</td>\n",
              "      <td>90</td>\n",
              "      <td>-64</td>\n",
              "      <td>16</td>\n",
              "      <td>0.42</td>\n",
              "      <td>19831.0</td>\n",
              "      <td>Mamadou Sylla - 5</td>\n",
              "      <td>Karl Jakob Hein</td>\n",
              "      <td>Relegated</td>\n",
              "      <td>2024</td>\n",
              "      <td>34.6</td>\n",
              "      <td>67.6</td>\n",
              "      <td>-33.0</td>\n",
              "      <td>-0.87</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>16.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-382d7522-77a2-41ce-b8d5-b996b5c6f3d8')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-382d7522-77a2-41ce-b8d5-b996b5c6f3d8 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-382d7522-77a2-41ce-b8d5-b996b5c6f3d8');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-abbc3fa8-73bf-4800-b9b0-c7f31435ff79\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-abbc3fa8-73bf-4800-b9b0-c7f31435ff79')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-abbc3fa8-73bf-4800-b9b0-c7f31435ff79 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {},
          "execution_count": 61
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Defining the Features (Inputs) the Model will use\n",
        "features = ['pts/mp', 'gd', 'w', 'l', 'projected_pts']\n",
        "\n",
        "# Creating Training Data: All Seasons before 2024\n",
        "df_train = df[df['season_start_yr'] < 2024]\n",
        "\n",
        "# Creating Testing Data: Only the Season starting in 2024 (2024-2025: the Current, Ongoing one)\n",
        "df_test = df[df['season_start_yr'] == 2024].copy()\n",
        "\n",
        "# Defining the Feature Matrix (X) and Target variable (y)\n",
        "X_train = df_train[features]\n",
        "y_train = df_train['is_champ']\n",
        "X_test = df_test[features]"
      ],
      "metadata": {
        "id": "ymbKDWQHRwfF"
      },
      "execution_count": 62,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Finally, Building and Implementing the ML Model"
      ],
      "metadata": {
        "id": "qUuoGkDW5qZn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Initializing the Model with 200 Trees and a Fixed Random state for Reproducibility\n",
        "model = RandomForestClassifier(n_estimators = 200, random_state = 7) # \"estimator\" = Tree (of Probabibilty); Result: Average of all Trees\n",
        "\n",
        "# Training the Model on the Training data\n",
        "model.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 79
        },
        "id": "Fals_P69TPjX",
        "outputId": "05c12e0f-20fa-46e4-b5df-7ece47a8d8cc"
      },
      "execution_count": 63,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomForestClassifier(n_estimators=200, random_state=7)"
            ],
            "text/html": [
              "<style>#sk-container-id-2 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-2 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-2 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-2 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-2 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-2 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-2 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-2 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-2 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(n_estimators=200, random_state=7)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>RandomForestClassifier</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.ensemble.RandomForestClassifier.html\">?<span>Documentation for RandomForestClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestClassifier(n_estimators=200, random_state=7)</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 63
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Predicting Binary Outcomes (0 or 1) on the Training set\n",
        "train_preds = model.predict(X_train)\n",
        "\n",
        "# Predicting the Probabilities of being Champion\n",
        "train_probs = model.predict_proba(X_train)[:, 1] # Only the Probability of Value \"1\": Being League Champion"
      ],
      "metadata": {
        "id": "A4ocCMrZUAb0"
      },
      "execution_count": 64,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Evaluation of the Model:"
      ],
      "metadata": {
        "id": "-_Mu-TdZVkr6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Computing the Accuracy of the Model\n",
        "acc = accuracy_score(y_train, train_preds)\n",
        "\n",
        "# Computing the ROC-AUC Score of the Model\n",
        "roc_auc = roc_auc_score(y_train, train_probs)\n",
        "\n",
        "# Computing the Log-Loss (Lower ~ Better)\n",
        "logloss = log_loss(y_train, train_probs)\n",
        "\n",
        "# Printing the Performance Metrics of the Model!\n",
        "print(f\"Model Performance on Historical Data:\")\n",
        "print(f\"Accuracy: {acc:.3f}\")\n",
        "print(f\"ROC-AUC Score: {roc_auc:.3f}\")\n",
        "print(f\"Log-Loss: {logloss:.3f}\")\n",
        "\n",
        "# Printing Detailed Classification Performance\n",
        "print(\"\\n Classification Report:\")\n",
        "print(classification_report(y_train, train_preds))\n",
        "\n",
        "# Displaying the Confusion Matrix (True VS Predicted Values)\n",
        "print(\"Confusion Matrix:\")\n",
        "print(confusion_matrix(y_train, train_preds))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "86GEe_iUVaV5",
        "outputId": "d2329cc5-b1e9-4a48-a63d-7dd024eddfb7"
      },
      "execution_count": 65,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model Performance on Historical Data:\n",
            "Accuracy: 1.000\n",
            "ROC-AUC Score: 1.000\n",
            "Log-Loss: 0.014\n",
            "\n",
            " Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00       190\n",
            "           1       1.00      1.00      1.00        10\n",
            "\n",
            "    accuracy                           1.00       200\n",
            "   macro avg       1.00      1.00      1.00       200\n",
            "weighted avg       1.00      1.00      1.00       200\n",
            "\n",
            "Confusion Matrix:\n",
            "[[190   0]\n",
            " [  0  10]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Out of the 200 Teams, in Total, who competed in La Liga in the 10 seasons before the current one, 10 (not Distinct) won."
      ],
      "metadata": {
        "id": "C14gcZ0GWm9U"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "*   **Precision**: Out of all the times the model said \"yes,\" how many times was it right?\n",
        "*   **Recall**: Out of all the Actual \"yes\" cases, how many did the model catch?\n",
        "*   **F1-Score**: A mix of Precision and Recall in one number.\n",
        "*   **Support**: The number of Actual cases for each Class (label) in your data.\n",
        "*   **Confusion Matrix**: A table that shows what the model got right and wrong."
      ],
      "metadata": {
        "id": "4WqIYPOWW2mx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Now, Predicting the Probability of each Team becoming Champion this current Season (2024-2025)!\n",
        "df_test['win_probability'] = model.predict_proba(X_test)[:, 1]\n",
        "\n",
        "df_test.head(4)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "qfeWl1H4VeLU",
        "outputId": "2f57b150-2b32-4fbd-d738-fc1d99d16fb1"
      },
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     rk            squad  mp   w   d  l   gf  ga  gd  pts  pts/mp  attendance  \\\n",
              "200   1        Barcelona  38  28   4  6  102  39  63   88    2.32     45953.0   \n",
              "201   2      Real Madrid  38  26   6  6   78  38  40   84    2.21     69807.0   \n",
              "202   3  Atlético Madrid  38  22  10  6   68  30  38   76    2.00     60883.0   \n",
              "203   4    Athletic Club  38  19  13  6   54  29  25   70    1.84     48420.0   \n",
              "\n",
              "             top_team_scorer        goalkeeper  \\\n",
              "200  Robert Lewandowski - 27        Iñaki Peña   \n",
              "201       Kylian Mbappé - 31  Thibaut Courtois   \n",
              "202   Alexander Sørloth - 20         Jan Oblak   \n",
              "203        Oihan Sancet - 15        Unai Simón   \n",
              "\n",
              "                                    notes  season_start_yr    xg   xga   xgd  \\\n",
              "200  → Champions League via league finish             2024  91.5  41.9  49.5   \n",
              "201  → Champions League via league finish             2024  75.3  42.8  32.5   \n",
              "202  → Champions League via league finish             2024  64.6  33.4  31.2   \n",
              "203  → Champions League via league finish             2024  53.0  37.8  15.2   \n",
              "\n",
              "     xgd/90  is_champ  games_left  projected_pts  win_probability  \n",
              "200    1.30         1           0           88.0            0.755  \n",
              "201    0.86         0           0           84.0            0.130  \n",
              "202    0.82         0           0           76.0            0.000  \n",
              "203    0.40         0           0           70.0            0.000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-97b84e19-9688-4bf4-922d-f71b56051b4e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>rk</th>\n",
              "      <th>squad</th>\n",
              "      <th>mp</th>\n",
              "      <th>w</th>\n",
              "      <th>d</th>\n",
              "      <th>l</th>\n",
              "      <th>gf</th>\n",
              "      <th>ga</th>\n",
              "      <th>gd</th>\n",
              "      <th>pts</th>\n",
              "      <th>pts/mp</th>\n",
              "      <th>attendance</th>\n",
              "      <th>top_team_scorer</th>\n",
              "      <th>goalkeeper</th>\n",
              "      <th>notes</th>\n",
              "      <th>season_start_yr</th>\n",
              "      <th>xg</th>\n",
              "      <th>xga</th>\n",
              "      <th>xgd</th>\n",
              "      <th>xgd/90</th>\n",
              "      <th>is_champ</th>\n",
              "      <th>games_left</th>\n",
              "      <th>projected_pts</th>\n",
              "      <th>win_probability</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>200</th>\n",
              "      <td>1</td>\n",
              "      <td>Barcelona</td>\n",
              "      <td>38</td>\n",
              "      <td>28</td>\n",
              "      <td>4</td>\n",
              "      <td>6</td>\n",
              "      <td>102</td>\n",
              "      <td>39</td>\n",
              "      <td>63</td>\n",
              "      <td>88</td>\n",
              "      <td>2.32</td>\n",
              "      <td>45953.0</td>\n",
              "      <td>Robert Lewandowski - 27</td>\n",
              "      <td>Iñaki Peña</td>\n",
              "      <td>→ Champions League via league finish</td>\n",
              "      <td>2024</td>\n",
              "      <td>91.5</td>\n",
              "      <td>41.9</td>\n",
              "      <td>49.5</td>\n",
              "      <td>1.30</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>88.0</td>\n",
              "      <td>0.755</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>201</th>\n",
              "      <td>2</td>\n",
              "      <td>Real Madrid</td>\n",
              "      <td>38</td>\n",
              "      <td>26</td>\n",
              "      <td>6</td>\n",
              "      <td>6</td>\n",
              "      <td>78</td>\n",
              "      <td>38</td>\n",
              "      <td>40</td>\n",
              "      <td>84</td>\n",
              "      <td>2.21</td>\n",
              "      <td>69807.0</td>\n",
              "      <td>Kylian Mbappé - 31</td>\n",
              "      <td>Thibaut Courtois</td>\n",
              "      <td>→ Champions League via league finish</td>\n",
              "      <td>2024</td>\n",
              "      <td>75.3</td>\n",
              "      <td>42.8</td>\n",
              "      <td>32.5</td>\n",
              "      <td>0.86</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>84.0</td>\n",
              "      <td>0.130</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>202</th>\n",
              "      <td>3</td>\n",
              "      <td>Atlético Madrid</td>\n",
              "      <td>38</td>\n",
              "      <td>22</td>\n",
              "      <td>10</td>\n",
              "      <td>6</td>\n",
              "      <td>68</td>\n",
              "      <td>30</td>\n",
              "      <td>38</td>\n",
              "      <td>76</td>\n",
              "      <td>2.00</td>\n",
              "      <td>60883.0</td>\n",
              "      <td>Alexander Sørloth - 20</td>\n",
              "      <td>Jan Oblak</td>\n",
              "      <td>→ Champions League via league finish</td>\n",
              "      <td>2024</td>\n",
              "      <td>64.6</td>\n",
              "      <td>33.4</td>\n",
              "      <td>31.2</td>\n",
              "      <td>0.82</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>76.0</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>203</th>\n",
              "      <td>4</td>\n",
              "      <td>Athletic Club</td>\n",
              "      <td>38</td>\n",
              "      <td>19</td>\n",
              "      <td>13</td>\n",
              "      <td>6</td>\n",
              "      <td>54</td>\n",
              "      <td>29</td>\n",
              "      <td>25</td>\n",
              "      <td>70</td>\n",
              "      <td>1.84</td>\n",
              "      <td>48420.0</td>\n",
              "      <td>Oihan Sancet - 15</td>\n",
              "      <td>Unai Simón</td>\n",
              "      <td>→ Champions League via league finish</td>\n",
              "      <td>2024</td>\n",
              "      <td>53.0</td>\n",
              "      <td>37.8</td>\n",
              "      <td>15.2</td>\n",
              "      <td>0.40</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>70.0</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-97b84e19-9688-4bf4-922d-f71b56051b4e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-97b84e19-9688-4bf4-922d-f71b56051b4e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-97b84e19-9688-4bf4-922d-f71b56051b4e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-d1a2e7ee-899d-4ea5-b25c-fbe26faab405\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d1a2e7ee-899d-4ea5-b25c-fbe26faab405')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-d1a2e7ee-899d-4ea5-b25c-fbe26faab405 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_test"
            }
          },
          "metadata": {},
          "execution_count": 66
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Let's turn each Probability into a Percentile; Total % Chance of a Team Winning the League this year?\n",
        "df_test[\"win_probability (%)\"] = ((df_test['win_probability']/df_test['win_probability'].sum()) * 100).round(3)\n",
        "\n",
        "df_test.head(4)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 489
        },
        "id": "7uV5A5a8Xkqi",
        "outputId": "8f7d9eeb-5de8-4d3c-e9e9-59fb7392ae6e"
      },
      "execution_count": 67,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     rk            squad  mp   w   d  l   gf  ga  gd  pts  pts/mp  attendance  \\\n",
              "200   1        Barcelona  38  28   4  6  102  39  63   88    2.32     45953.0   \n",
              "201   2      Real Madrid  38  26   6  6   78  38  40   84    2.21     69807.0   \n",
              "202   3  Atlético Madrid  38  22  10  6   68  30  38   76    2.00     60883.0   \n",
              "203   4    Athletic Club  38  19  13  6   54  29  25   70    1.84     48420.0   \n",
              "\n",
              "             top_team_scorer        goalkeeper  \\\n",
              "200  Robert Lewandowski - 27        Iñaki Peña   \n",
              "201       Kylian Mbappé - 31  Thibaut Courtois   \n",
              "202   Alexander Sørloth - 20         Jan Oblak   \n",
              "203        Oihan Sancet - 15        Unai Simón   \n",
              "\n",
              "                                    notes  season_start_yr    xg   xga   xgd  \\\n",
              "200  → Champions League via league finish             2024  91.5  41.9  49.5   \n",
              "201  → Champions League via league finish             2024  75.3  42.8  32.5   \n",
              "202  → Champions League via league finish             2024  64.6  33.4  31.2   \n",
              "203  → Champions League via league finish             2024  53.0  37.8  15.2   \n",
              "\n",
              "     xgd/90  is_champ  games_left  projected_pts  win_probability  \\\n",
              "200    1.30         1           0           88.0            0.755   \n",
              "201    0.86         0           0           84.0            0.130   \n",
              "202    0.82         0           0           76.0            0.000   \n",
              "203    0.40         0           0           70.0            0.000   \n",
              "\n",
              "     win_probability (%)  \n",
              "200               85.311  \n",
              "201               14.689  \n",
              "202                0.000  \n",
              "203                0.000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c3e2d7c8-06fd-4113-bea8-264fc9c87d26\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>rk</th>\n",
              "      <th>squad</th>\n",
              "      <th>mp</th>\n",
              "      <th>w</th>\n",
              "      <th>d</th>\n",
              "      <th>l</th>\n",
              "      <th>gf</th>\n",
              "      <th>ga</th>\n",
              "      <th>gd</th>\n",
              "      <th>pts</th>\n",
              "      <th>pts/mp</th>\n",
              "      <th>attendance</th>\n",
              "      <th>top_team_scorer</th>\n",
              "      <th>goalkeeper</th>\n",
              "      <th>notes</th>\n",
              "      <th>season_start_yr</th>\n",
              "      <th>xg</th>\n",
              "      <th>xga</th>\n",
              "      <th>xgd</th>\n",
              "      <th>xgd/90</th>\n",
              "      <th>is_champ</th>\n",
              "      <th>games_left</th>\n",
              "      <th>projected_pts</th>\n",
              "      <th>win_probability</th>\n",
              "      <th>win_probability (%)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>200</th>\n",
              "      <td>1</td>\n",
              "      <td>Barcelona</td>\n",
              "      <td>38</td>\n",
              "      <td>28</td>\n",
              "      <td>4</td>\n",
              "      <td>6</td>\n",
              "      <td>102</td>\n",
              "      <td>39</td>\n",
              "      <td>63</td>\n",
              "      <td>88</td>\n",
              "      <td>2.32</td>\n",
              "      <td>45953.0</td>\n",
              "      <td>Robert Lewandowski - 27</td>\n",
              "      <td>Iñaki Peña</td>\n",
              "      <td>→ Champions League via league finish</td>\n",
              "      <td>2024</td>\n",
              "      <td>91.5</td>\n",
              "      <td>41.9</td>\n",
              "      <td>49.5</td>\n",
              "      <td>1.30</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>88.0</td>\n",
              "      <td>0.755</td>\n",
              "      <td>85.311</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>201</th>\n",
              "      <td>2</td>\n",
              "      <td>Real Madrid</td>\n",
              "      <td>38</td>\n",
              "      <td>26</td>\n",
              "      <td>6</td>\n",
              "      <td>6</td>\n",
              "      <td>78</td>\n",
              "      <td>38</td>\n",
              "      <td>40</td>\n",
              "      <td>84</td>\n",
              "      <td>2.21</td>\n",
              "      <td>69807.0</td>\n",
              "      <td>Kylian Mbappé - 31</td>\n",
              "      <td>Thibaut Courtois</td>\n",
              "      <td>→ Champions League via league finish</td>\n",
              "      <td>2024</td>\n",
              "      <td>75.3</td>\n",
              "      <td>42.8</td>\n",
              "      <td>32.5</td>\n",
              "      <td>0.86</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>84.0</td>\n",
              "      <td>0.130</td>\n",
              "      <td>14.689</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>202</th>\n",
              "      <td>3</td>\n",
              "      <td>Atlético Madrid</td>\n",
              "      <td>38</td>\n",
              "      <td>22</td>\n",
              "      <td>10</td>\n",
              "      <td>6</td>\n",
              "      <td>68</td>\n",
              "      <td>30</td>\n",
              "      <td>38</td>\n",
              "      <td>76</td>\n",
              "      <td>2.00</td>\n",
              "      <td>60883.0</td>\n",
              "      <td>Alexander Sørloth - 20</td>\n",
              "      <td>Jan Oblak</td>\n",
              "      <td>→ Champions League via league finish</td>\n",
              "      <td>2024</td>\n",
              "      <td>64.6</td>\n",
              "      <td>33.4</td>\n",
              "      <td>31.2</td>\n",
              "      <td>0.82</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>76.0</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>203</th>\n",
              "      <td>4</td>\n",
              "      <td>Athletic Club</td>\n",
              "      <td>38</td>\n",
              "      <td>19</td>\n",
              "      <td>13</td>\n",
              "      <td>6</td>\n",
              "      <td>54</td>\n",
              "      <td>29</td>\n",
              "      <td>25</td>\n",
              "      <td>70</td>\n",
              "      <td>1.84</td>\n",
              "      <td>48420.0</td>\n",
              "      <td>Oihan Sancet - 15</td>\n",
              "      <td>Unai Simón</td>\n",
              "      <td>→ Champions League via league finish</td>\n",
              "      <td>2024</td>\n",
              "      <td>53.0</td>\n",
              "      <td>37.8</td>\n",
              "      <td>15.2</td>\n",
              "      <td>0.40</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>70.0</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c3e2d7c8-06fd-4113-bea8-264fc9c87d26')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c3e2d7c8-06fd-4113-bea8-264fc9c87d26 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c3e2d7c8-06fd-4113-bea8-264fc9c87d26');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-fd293127-d81d-4100-aaa2-6b78a8d53d0c\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fd293127-d81d-4100-aaa2-6b78a8d53d0c')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-fd293127-d81d-4100-aaa2-6b78a8d53d0c button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_test"
            }
          },
          "metadata": {},
          "execution_count": 67
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_test[['rk', 'squad', 'mp', 'projected_pts', 'win_probability (%)']].sort_values('projected_pts', ascending = False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 676
        },
        "id": "Mzc6v6ijZGj-",
        "outputId": "eec7ec25-5d27-4327-d48e-4c20b08caba6"
      },
      "execution_count": 68,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     rk            squad  mp  projected_pts  win_probability (%)\n",
              "200   1        Barcelona  38           88.0               85.311\n",
              "201   2      Real Madrid  38           84.0               14.689\n",
              "202   3  Atlético Madrid  38           76.0                0.000\n",
              "203   4    Athletic Club  38           70.0                0.000\n",
              "204   5       Villarreal  38           70.0                0.000\n",
              "205   6            Betis  38           60.0                0.000\n",
              "206   7       Celta Vigo  38           55.0                0.000\n",
              "207   8   Rayo Vallecano  38           52.0                0.000\n",
              "208   9          Osasuna  38           52.0                0.000\n",
              "209  10         Mallorca  38           48.0                0.000\n",
              "210  11    Real Sociedad  38           46.0                0.000\n",
              "211  12         Valencia  38           46.0                0.000\n",
              "212  13           Getafe  38           42.0                0.000\n",
              "213  14         Espanyol  38           42.0                0.000\n",
              "214  15           Alavés  38           42.0                0.000\n",
              "215  16           Girona  38           41.0                0.000\n",
              "216  17          Sevilla  38           41.0                0.000\n",
              "217  18          Leganés  38           40.0                0.000\n",
              "218  19       Las Palmas  38           32.0                0.000\n",
              "219  20       Valladolid  38           16.0                0.000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0dc88fa8-db75-4818-b82c-65585d3bce81\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>rk</th>\n",
              "      <th>squad</th>\n",
              "      <th>mp</th>\n",
              "      <th>projected_pts</th>\n",
              "      <th>win_probability (%)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>200</th>\n",
              "      <td>1</td>\n",
              "      <td>Barcelona</td>\n",
              "      <td>38</td>\n",
              "      <td>88.0</td>\n",
              "      <td>85.311</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>201</th>\n",
              "      <td>2</td>\n",
              "      <td>Real Madrid</td>\n",
              "      <td>38</td>\n",
              "      <td>84.0</td>\n",
              "      <td>14.689</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>202</th>\n",
              "      <td>3</td>\n",
              "      <td>Atlético Madrid</td>\n",
              "      <td>38</td>\n",
              "      <td>76.0</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>203</th>\n",
              "      <td>4</td>\n",
              "      <td>Athletic Club</td>\n",
              "      <td>38</td>\n",
              "      <td>70.0</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>204</th>\n",
              "      <td>5</td>\n",
              "      <td>Villarreal</td>\n",
              "      <td>38</td>\n",
              "      <td>70.0</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>205</th>\n",
              "      <td>6</td>\n",
              "      <td>Betis</td>\n",
              "      <td>38</td>\n",
              "      <td>60.0</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>206</th>\n",
              "      <td>7</td>\n",
              "      <td>Celta Vigo</td>\n",
              "      <td>38</td>\n",
              "      <td>55.0</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>207</th>\n",
              "      <td>8</td>\n",
              "      <td>Rayo Vallecano</td>\n",
              "      <td>38</td>\n",
              "      <td>52.0</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>208</th>\n",
              "      <td>9</td>\n",
              "      <td>Osasuna</td>\n",
              "      <td>38</td>\n",
              "      <td>52.0</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>209</th>\n",
              "      <td>10</td>\n",
              "      <td>Mallorca</td>\n",
              "      <td>38</td>\n",
              "      <td>48.0</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>210</th>\n",
              "      <td>11</td>\n",
              "      <td>Real Sociedad</td>\n",
              "      <td>38</td>\n",
              "      <td>46.0</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>211</th>\n",
              "      <td>12</td>\n",
              "      <td>Valencia</td>\n",
              "      <td>38</td>\n",
              "      <td>46.0</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>212</th>\n",
              "      <td>13</td>\n",
              "      <td>Getafe</td>\n",
              "      <td>38</td>\n",
              "      <td>42.0</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>213</th>\n",
              "      <td>14</td>\n",
              "      <td>Espanyol</td>\n",
              "      <td>38</td>\n",
              "      <td>42.0</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>214</th>\n",
              "      <td>15</td>\n",
              "      <td>Alavés</td>\n",
              "      <td>38</td>\n",
              "      <td>42.0</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>215</th>\n",
              "      <td>16</td>\n",
              "      <td>Girona</td>\n",
              "      <td>38</td>\n",
              "      <td>41.0</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>216</th>\n",
              "      <td>17</td>\n",
              "      <td>Sevilla</td>\n",
              "      <td>38</td>\n",
              "      <td>41.0</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>217</th>\n",
              "      <td>18</td>\n",
              "      <td>Leganés</td>\n",
              "      <td>38</td>\n",
              "      <td>40.0</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>218</th>\n",
              "      <td>19</td>\n",
              "      <td>Las Palmas</td>\n",
              "      <td>38</td>\n",
              "      <td>32.0</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>219</th>\n",
              "      <td>20</td>\n",
              "      <td>Valladolid</td>\n",
              "      <td>38</td>\n",
              "      <td>16.0</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0dc88fa8-db75-4818-b82c-65585d3bce81')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-0dc88fa8-db75-4818-b82c-65585d3bce81 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-0dc88fa8-db75-4818-b82c-65585d3bce81');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-ecb55a3c-de94-465a-b4dc-2c7671bbed03\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ecb55a3c-de94-465a-b4dc-2c7671bbed03')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-ecb55a3c-de94-465a-b4dc-2c7671bbed03 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df_test[['rk', 'squad', 'mp', 'projected_pts', 'win_probability (%)']]\",\n  \"rows\": 20,\n  \"fields\": [\n    {\n      \"column\": \"rk\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 1,\n        \"max\": 20,\n        \"num_unique_values\": 20,\n        \"samples\": [\n          1,\n          18,\n          16\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"squad\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 20,\n        \"samples\": [\n          \"Barcelona\",\n          \"Legan\\u00e9s\",\n          \"Girona\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 38,\n        \"max\": 38,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          38\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"projected_pts\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17.898176913923532,\n        \"min\": 16.0,\n        \"max\": 88.0,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          42.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"win_probability (%)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 19.185703890904648,\n        \"min\": 0.0,\n        \"max\": 85.311,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          85.311\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 68
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Based on my Analysis:\n",
        "\n",
        "*   FC Barcelona appear to be well-primed to become the Spanish League Champions this Season, with a 96.2% Chance of Winning with 4 Games left to go.\n",
        "*   Celta Vigo is most likely going to the Conference League by virtue of a 7th place finish (based on Projected Points).\n"
      ],
      "metadata": {
        "id": "orQ0rwPQZQRW"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Additional Machine Learning Models for More Detail from Different Angles:"
      ],
      "metadata": {
        "id": "brG4F50p_TvN"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Logistic Regression\n",
        "\n",
        "Given some Data, Predicting if a Team will become Champion or Not"
      ],
      "metadata": {
        "id": "i4jy0b_mKGk2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_nums = df.select_dtypes(include = ['number']).fillna(0)\n",
        "\n",
        "# Let's Predict Solely on In-Game Performance and some Table Context (Current Position in Relation to Other Teams), if any given Team will be Champions or Not\n",
        "\n",
        "X = df_nums.drop(['is_champ', 'season_start_yr', 'attendance'], axis = 1)\n",
        "y = df['is_champ']"
      ],
      "metadata": {
        "id": "FsmkjMLPKHo8"
      },
      "execution_count": 69,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.metrics import accuracy_score\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "sc = StandardScaler()\n",
        "logr = LogisticRegression()"
      ],
      "metadata": {
        "id": "QK6u2FB9LL2u"
      },
      "execution_count": 70,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 7)\n",
        "\n",
        "X_train_sc = sc.fit_transform(X_train)\n",
        "X_test_sc = sc.fit_transform(X_test)"
      ],
      "metadata": {
        "id": "Wx-6-WurLaHh"
      },
      "execution_count": 71,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "logr.fit(X_train_sc, y_train)\n",
        "\n",
        "y_pred_logr = logr.predict(X_test_sc)\n",
        "\n",
        "# Evaluate the Model\n",
        "print(round(accuracy_score(y_test, y_pred_logr)*100, 2), '%')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OMpeOjt1LmYg",
        "outputId": "f264c80d-11c4-40de-d48a-3726aad938ed"
      },
      "execution_count": 72,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "96.36 %\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Getting a Better Glimpse at the Behind-the-Scenes of the Model\n",
        "\n",
        "print(logr.intercept_.round(3)) # The Intercept of the Model\n",
        "pd.DataFrame(logr.coef_, columns = X_train.columns).round(3) # The Value of each Coefficient"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 98
        },
        "id": "ZbBEpih7Meze",
        "outputId": "53287dd8-ddba-46e2-ebb6-44e3af1491c2"
      },
      "execution_count": 73,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[-11.658]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      rk   mp      w      d      l     gf   ga     gd    pts  pts/mp     xg  \\\n",
              "0 -0.528  0.0  0.584 -0.154 -0.575  0.078 -1.3  0.689  0.595   0.581  0.293   \n",
              "\n",
              "     xga    xgd  xgd/90  games_left  projected_pts  \n",
              "0  0.138  0.278   0.267         0.0          0.595  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4166d3bc-a7a7-4bd9-b530-c538fb94e58b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>rk</th>\n",
              "      <th>mp</th>\n",
              "      <th>w</th>\n",
              "      <th>d</th>\n",
              "      <th>l</th>\n",
              "      <th>gf</th>\n",
              "      <th>ga</th>\n",
              "      <th>gd</th>\n",
              "      <th>pts</th>\n",
              "      <th>pts/mp</th>\n",
              "      <th>xg</th>\n",
              "      <th>xga</th>\n",
              "      <th>xgd</th>\n",
              "      <th>xgd/90</th>\n",
              "      <th>games_left</th>\n",
              "      <th>projected_pts</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>-0.528</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.584</td>\n",
              "      <td>-0.154</td>\n",
              "      <td>-0.575</td>\n",
              "      <td>0.078</td>\n",
              "      <td>-1.3</td>\n",
              "      <td>0.689</td>\n",
              "      <td>0.595</td>\n",
              "      <td>0.581</td>\n",
              "      <td>0.293</td>\n",
              "      <td>0.138</td>\n",
              "      <td>0.278</td>\n",
              "      <td>0.267</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.595</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4166d3bc-a7a7-4bd9-b530-c538fb94e58b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4166d3bc-a7a7-4bd9-b530-c538fb94e58b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4166d3bc-a7a7-4bd9-b530-c538fb94e58b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"pd\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"rk\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": -0.528,\n        \"max\": -0.528,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          -0.528\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.0,\n        \"max\": 0.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"w\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.584,\n        \"max\": 0.584,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.584\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"d\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": -0.154,\n        \"max\": -0.154,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          -0.154\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"l\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": -0.575,\n        \"max\": -0.575,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          -0.575\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gf\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.078,\n        \"max\": 0.078,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.078\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ga\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": -1.3,\n        \"max\": -1.3,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          -1.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gd\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.689,\n        \"max\": 0.689,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.689\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pts\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.595,\n        \"max\": 0.595,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.595\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pts/mp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.581,\n        \"max\": 0.581,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.581\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"xg\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.293,\n        \"max\": 0.293,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.293\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"xga\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.138,\n        \"max\": 0.138,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.138\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"xgd\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.278,\n        \"max\": 0.278,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.278\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"xgd/90\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.267,\n        \"max\": 0.267,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.267\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"games_left\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.0,\n        \"max\": 0.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"projected_pts\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.595,\n        \"max\": 0.595,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.595\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 73
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Sample Prediction\n",
        "logr.predict([[2, 33, 24, 7, 2, 73, 20, 53, 79, 2.39, 75.3, 17.6, 57.7, 0.52, 5, 90.95]]) # Such a Team will end up Champion!"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "znG6LwsPOUBX",
        "outputId": "4eb702a8-b164-44a9-a11d-fda021cc11e4"
      },
      "execution_count": 74,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([1])"
            ]
          },
          "metadata": {},
          "execution_count": 74
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Multiple Linear Regression\n",
        "\n",
        "### Regularized Linear Models: Lasso Regression (L1 Regularization)\n",
        "\n",
        "Given Certain data, Predicting the Amount of Points a Team would end up with in an Amount of Time"
      ],
      "metadata": {
        "id": "65i8yzRdTL1-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "X_linreg = df[['mp', 'w', 'd', 'l', 'pts/mp', 'xgd/90', 'games_left']].fillna(0)\n",
        "y_linreg = df['projected_pts']"
      ],
      "metadata": {
        "id": "3nMbypjCSZaG"
      },
      "execution_count": 75,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Lasso Regression** for Feature Selection:"
      ],
      "metadata": {
        "id": "um-Wt5Rnp-9I"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LassoCV\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.metrics import mean_squared_error as mse, root_mean_squared_error as rmse, mean_absolute_error as mae, r2_score\n",
        "from sklearn.model_selection import cross_val_score as cv, train_test_split\n",
        "\n",
        "X_train_linreg, X_test_linreg, y_train_linreg, y_test_linreg = train_test_split(X_linreg, y_linreg, test_size = 0.25, random_state = 10)\n",
        "\n",
        "# Scaling the Predictor Variables\n",
        "sc = StandardScaler()\n",
        "X_train_scaled = sc.fit_transform(X_train_linreg)\n",
        "X_test_scaled = sc.transform(X_test_linreg)\n",
        "\n",
        "# Processing using \"LassoCV\" - Best for Lasso only; will Proceed with it\n",
        "lassocv_model = LassoCV(cv = 5, random_state = 7, max_iter = 10000)\n",
        "lassocv_model.fit(X_train_scaled, y_train_linreg)\n",
        "best_alpha_lassocv = lassocv_model.alpha_\n",
        "\n",
        "# Making Predictions using the Model with the best Alpha\n",
        "y_pred_lassocv = lassocv_model.predict(X_test_scaled)\n",
        "\n",
        "# Evaluating the Model\n",
        "print(\"\\nLassoCV Model Performance:\")\n",
        "print(\"The Mean Squared Error:\", round(mse(y_test_linreg, y_pred_lassocv), 2))\n",
        "print(\"The Root Mean Squared Error:\", round(rmse(y_test_linreg, y_pred_lassocv), 2))\n",
        "print(\"The Mean Absolute Error:\", round(mae(y_test_linreg, y_pred_lassocv), 2))\n",
        "print(f\"R^2 Score on Training Set:\", round(np.mean(cv(lassocv_model, X_train_scaled, y_train_linreg, cv = 5))*100, 2), \"%\")\n",
        "print(f\"R^2 Score on Test Set:\", round(r2_score(y_test_linreg, y_pred_lassocv)*100, 2), '%')\n",
        "\n",
        "# Identifying the Selected Features from the Lasso Regression Model\n",
        "selected_features_lassocv = X_linreg.columns[lassocv_model.coef_ != 0].tolist()\n",
        "print(\"\\nFeatures selected by LassoCV:\", selected_features_lassocv)\n",
        "\n",
        "# Coefficients of Selected Features\n",
        "all_coefficients = lassocv_model.coef_\n",
        "coefficient_series = pd.Series(all_coefficients, index=X_linreg.columns)\n",
        "selected_coefficients = coefficient_series[selected_features_lassocv]\n",
        "print(\"\\nCoefficients of the LassoCV Model:\")\n",
        "pd.DataFrame(selected_coefficients, columns = ['Coefficient']).round(5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 334
        },
        "id": "bSZjYNudR5nt",
        "outputId": "b807f0c7-e762-44e6-ee10-85200974b484"
      },
      "execution_count": 76,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "LassoCV Model Performance:\n",
            "The Mean Squared Error: 0.0\n",
            "The Root Mean Squared Error: 0.07\n",
            "The Mean Absolute Error: 0.05\n",
            "R^2 Score on Training Set: 99.97 %\n",
            "R^2 Score on Test Set: 100.0 %\n",
            "\n",
            "Features selected by LassoCV: ['w', 'l', 'pts/mp']\n",
            "\n",
            "Coefficients of the LassoCV Model:\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        Coefficient\n",
              "w           3.99408\n",
              "l          -1.78808\n",
              "pts/mp     11.64785"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4b20c6bd-7a54-4447-b2a2-de02fe737baa\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Coefficient</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>w</th>\n",
              "      <td>3.99408</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>l</th>\n",
              "      <td>-1.78808</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>pts/mp</th>\n",
              "      <td>11.64785</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4b20c6bd-7a54-4447-b2a2-de02fe737baa')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4b20c6bd-7a54-4447-b2a2-de02fe737baa button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4b20c6bd-7a54-4447-b2a2-de02fe737baa');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-6eb6102d-050c-46a8-90b5-34f65bb4e224\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6eb6102d-050c-46a8-90b5-34f65bb4e224')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-6eb6102d-050c-46a8-90b5-34f65bb4e224 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"pd\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": \"Coefficient\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.739656079793686,\n        \"min\": -1.78808,\n        \"max\": 11.64785,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3.99408,\n          -1.78808,\n          11.64785\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 76
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Detailed Statistical Review using OLS on the Lasso Regresion Model\n",
        "\n",
        "import statsmodels.api as sm\n",
        "\n",
        "# Select the features identified by Lasso from the original unscaled training data\n",
        "X_train_selected_ols = X_train_linreg[selected_features_lassocv].reset_index(drop = True)\n",
        "\n",
        "# Ensuring the Indices align\n",
        "y_train_linreg = y_train_linreg.reset_index(drop = True)\n",
        "\n",
        "# Add a constant (intercept) term to the predictor variables for OLS\n",
        "X_ols = sm.add_constant(X_train_selected_ols)\n",
        "\n",
        "# Ensure the target variable for OLS is a pandas Series and has a reset index if needed\n",
        "# Assuming y_train_linreg is already a Series from the train_test_split\n",
        "# If y_train_linreg is a NumPy array, you might need to convert it to a Series first\n",
        "# y_train_linreg_series = pd.Series(y_train_linreg).reset_index(drop=True)\n",
        "\n",
        "# Build and fit the OLS model using the data with the added constant\n",
        "model_ols = sm.OLS(y_train_linreg, X_ols).fit()\n",
        "\n",
        "# Print the summary\n",
        "print(\"\\nOLS Model Summary (using Lasso-selected features):\")\n",
        "print(model_ols.summary())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XVIE17kkZCUQ",
        "outputId": "9dd57534-c96a-4a13-e0be-6003dae09b61"
      },
      "execution_count": 77,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "OLS Model Summary (using Lasso-selected features):\n",
            "                            OLS Regression Results                            \n",
            "==============================================================================\n",
            "Dep. Variable:          projected_pts   R-squared:                       1.000\n",
            "Model:                            OLS   Adj. R-squared:                  1.000\n",
            "Method:                 Least Squares   F-statistic:                 1.823e+06\n",
            "Date:                Thu, 12 Jun 2025   Prob (F-statistic):               0.00\n",
            "Time:                        20:16:51   Log-Likelihood:                 156.22\n",
            "No. Observations:                 165   AIC:                            -304.4\n",
            "Df Residuals:                     161   BIC:                            -292.0\n",
            "Df Model:                           3                                         \n",
            "Covariance Type:            nonrobust                                         \n",
            "==============================================================================\n",
            "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
            "------------------------------------------------------------------------------\n",
            "const          7.8631      1.064      7.388      0.000       5.761       9.965\n",
            "w              0.4072      0.056      7.307      0.000       0.297       0.517\n",
            "l             -0.2091      0.028     -7.423      0.000      -0.265      -0.153\n",
            "pts/mp        30.2173      1.059     28.544      0.000      28.127      32.308\n",
            "==============================================================================\n",
            "Omnibus:                       26.303   Durbin-Watson:                   1.942\n",
            "Prob(Omnibus):                  0.000   Jarque-Bera (JB):               61.634\n",
            "Skew:                          -0.668   Prob(JB):                     4.13e-14\n",
            "Kurtosis:                       5.679   Cond. No.                     4.08e+03\n",
            "==============================================================================\n",
            "\n",
            "Notes:\n",
            "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
            "[2] The condition number is large, 4.08e+03. This might indicate that there are\n",
            "strong multicollinearity or other numerical problems.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Reflections on the Statistical Summary:\n",
        "* The p-values of 'w', 'l', and 'pts/mp' are Statistically Significant\n",
        "* There is definitely a lot of Multicolinearity Identified - affects Coefficient Interpretability\n",
        "* However, the goal is Prediction and the Predictive Evaluations were Very Good (MSE, MAE, R-Squared, etc.)\n",
        "* So, we will continue with these Coefficients but will be cautious in Interpreting them INDIVIDUALLY"
      ],
      "metadata": {
        "id": "XeDRq4m5yP39"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Regularized Linear Models: Ridge Regression | I want a Better Measure of Each Coefficient's Effect on Projected Points\n",
        "Addressing Multicollinearity, Preventing Overfitting"
      ],
      "metadata": {
        "id": "lXLS9hhxfEeG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Assuming X_train_linreg, X_test_linreg, y_train_linreg, y_test_linreg are already defined\n",
        "\n",
        "from sklearn.linear_model import Ridge # Import Ridge\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.metrics import mean_squared_error as mse, root_mean_squared_error as rmse, mean_absolute_error as mae, r2_score\n",
        "from sklearn.model_selection import train_test_split, GridSearchCV # Import GridSearchCV\n",
        "import numpy as np # Needed for logspace\n",
        "\n",
        "# Scaling the Predictor Variables (Same as before)\n",
        "# sc = StandardScaler()\n",
        "# X_train_scaled = sc.fit_transform(X_train_linreg)\n",
        "# X_test_scaled = sc.transform(X_test_linreg)\n",
        "\n",
        "# --- Ridge Regression Implementation ---\n",
        "\n",
        "# Define a Range of alpha values to search for the best Alpha (Ridge L2 Regularization strength)\n",
        "# Ridge alpha is often explored on a logarithmic scale\n",
        "params_grid = {'alpha': np.logspace(-4, 4, 100)} # Example range, adjust if needed\n",
        "\n",
        "# Initialize Ridge model\n",
        "ridge = Ridge(random_state = 7, max_iter = 10000) # \"max_iter\" is less critical for Ridge than Lasso\n",
        "\n",
        "# Initialize GridSearchCV to find the best alpha using Cross-Validation\n",
        "# We will use 5-fold cross-validation, maximizing the negative Mean Squared Error (equivalent to minimizing MSE)\n",
        "ridge_grid = GridSearchCV(ridge, params_grid, cv = 5, n_jobs = -1)\n",
        "\n",
        "# Fit GridSearchCV on the scaled training data\n",
        "ridge_grid.fit(X_train_scaled, y_train_linreg)\n",
        "\n",
        "# Get the best Ridge model from the Grid Search\n",
        "best_ridge_model = ridge_grid.best_estimator_\n",
        "best_alpha_ridge = ridge_grid.best_params_['alpha']\n",
        "\n",
        "print(f\"\\nRidge Regression:\")\n",
        "print(f\"Best Alpha found by GridSearchCV: {best_alpha_ridge:.4f}\")\n",
        "\n",
        "# Making Predictions using the Best Ridge Model on the Test Data\n",
        "y_pred_ridge = best_ridge_model.predict(X_test_scaled)\n",
        "\n",
        "# Evaluating the Best Ridge Model\n",
        "print(\"\\nRidge Model Performance:\")\n",
        "print(\"The Mean Squared Error:\", round(mse(y_test_linreg, y_pred_ridge), 2))\n",
        "print(\"The Root Mean Squared Error:\", round(rmse(y_test_linreg, y_pred_ridge), 2))\n",
        "print(\"The Mean Absolute Error:\", round(mae(y_test_linreg, y_pred_ridge), 2))\n",
        "print(f\"R^2 Score on Training Data:\", round(np.mean(cv(lassocv_model, X_train_scaled, y_train_linreg, cv = 5))*100, 2), \"%\")\n",
        "print(f\"R^2 Score on Test Data:\", round(r2_score(y_test_linreg, y_pred_ridge)*100, 2), '%')\n",
        "\n",
        "# Inspecting the Coefficients from the Best Ridge Model\n",
        "ridge_coefficients = pd.Series(best_ridge_model.coef_, index=X_linreg.columns)\n",
        "print(\"\\nCoefficients of the Ridge Model:\")\n",
        "pd.DataFrame(ridge_coefficients, columns = ['Coefficient']).round(5)\n",
        "\n",
        "# You would then compare the performance metrics (MSE, R^2, etc.) of this Ridge model\n",
        "# to your Lasso model to see which one is better for prediction on this dataset.\n",
        "# You would also note that Ridge did not perform explicit feature selection (coefficients are non-zero)."
      ],
      "metadata": {
        "id": "aFZhcIodfHOf",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 477
        },
        "outputId": "2efc7a70-d191-468c-f341-6d4cc7241fe3"
      },
      "execution_count": 78,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Ridge Regression:\n",
            "Best Alpha found by GridSearchCV: 0.2057\n",
            "\n",
            "Ridge Model Performance:\n",
            "The Mean Squared Error: 0.0\n",
            "The Root Mean Squared Error: 0.04\n",
            "The Mean Absolute Error: 0.03\n",
            "R^2 Score on Training Data: 99.97 %\n",
            "R^2 Score on Test Data: 100.0 %\n",
            "\n",
            "Coefficients of the Ridge Model:\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            Coefficient\n",
              "mp              0.00000\n",
              "w               5.21524\n",
              "d              -1.06723\n",
              "l              -5.36416\n",
              "pts/mp          6.71639\n",
              "xgd/90         -0.00929\n",
              "games_left      0.00000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-cd833546-b891-41b6-b284-bddcc2eaccc6\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Coefficient</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>mp</th>\n",
              "      <td>0.00000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>w</th>\n",
              "      <td>5.21524</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>d</th>\n",
              "      <td>-1.06723</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>l</th>\n",
              "      <td>-5.36416</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>pts/mp</th>\n",
              "      <td>6.71639</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>xgd/90</th>\n",
              "      <td>-0.00929</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>games_left</th>\n",
              "      <td>0.00000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cd833546-b891-41b6-b284-bddcc2eaccc6')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-cd833546-b891-41b6-b284-bddcc2eaccc6 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-cd833546-b891-41b6-b284-bddcc2eaccc6');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-6079c090-bee0-4f5c-95ac-94eb6fdfe8bc\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6079c090-bee0-4f5c-95ac-94eb6fdfe8bc')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-6079c090-bee0-4f5c-95ac-94eb6fdfe8bc button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"# You would also note that Ridge did not perform explicit feature selection (coefficients are non-zero)\",\n  \"rows\": 7,\n  \"fields\": [\n    {\n      \"column\": \"Coefficient\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.039692288798857,\n        \"min\": -5.36416,\n        \"max\": 6.71639,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.0,\n          5.21524,\n          -0.00929\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 78
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Interpretation of Lasso and Ridge Model Results:\n",
        "Interpretation of Results:\n",
        "\n",
        "* **Excellent Predictive Power:** The low error metrics (MAE, RMSE, MSE) and    high R-squared values for both models demonstrate that they are highly accurate at predicting the projected_pts of La Liga teams based on the selected features. This is a strong foundation for making informed decisions and suggestions.\n",
        "* **Agreement on Key Predictors:** Both Lasso and Ridge models highlight the 'w' (wins), 'l' (losses), and 'pts/mp' (points per match) of a team as the most influential features for predicting future accumulated points.\n",
        "* Lasso's Feature Selection: The Lasso model believes that the information needed to predict projected points is primarily captured by wins, losses, and points per match.\n",
        "* **Ridge's Shrinkage and Distribution:** The absolute values of the coefficients for 'w', 'l', and 'pts/mp' are generally smaller in Ridge compared to Lasso. This is Ridge distributing the predictive power across all features, even those with weaker individual relationships. The small non-zero coefficient for 'xgd/90' in the Ridge model suggests it still contributes something to the prediction.\n",
        "* **Consistency Across Data Splits:** The consistent high performance on both training and testing data for both models is a very positive sign. It indicates that the models are generalizing well and are not overly complex for the underlying relationships in the data."
      ],
      "metadata": {
        "id": "eIEGmiMN9wF5"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Final Insights & Business Suggestions:\n",
        "\n",
        "* **Focus on Winning:** Emphasize the strong positive correlation between 'w' (wins) and 'projected_pts'. The higher the number of wins, the higher the projected points. This is an intuitive but statistically supported insight: winning games is the most direct path to accumulating points.\n",
        "  - Suggestion: Teams should prioritize strategies that maximize their chances of winning. Defensive Stability should follow suit, too.\n",
        "* **Points per Match as a Key Indicator:** 'pts/mp' is a normalized measure of a team's performance consistency. Its strong positive coefficient in both models confirms its importance.\n",
        "  - Suggestion: Teams should monitor and aim to improve their points per match average throughout the season. Consistent performance is a key driver of success.\n",
        "* **Interpretation of Other Features - Excluded by Lasso (L1 Regularization):**\n",
        "  - The Lasso model excluded xGD/90, 'd' (Draws), and 'mp' (Matches Played), and 'games_left'; the most surprising to me was the exclusion of games_left, but I understand now that, by utilizing the other predictors, the model inherently accounts for the remaining games."
      ],
      "metadata": {
        "id": "U9riEBHL-EaN"
      }
    }
  ]
}